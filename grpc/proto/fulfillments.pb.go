// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/fulfillments.proto

package orders

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FulfillmentId struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FulfillmentId) Reset()         { *m = FulfillmentId{} }
func (m *FulfillmentId) String() string { return proto.CompactTextString(m) }
func (*FulfillmentId) ProtoMessage()    {}
func (*FulfillmentId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6eb07998aecd5ff, []int{0}
}

func (m *FulfillmentId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FulfillmentId.Unmarshal(m, b)
}
func (m *FulfillmentId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FulfillmentId.Marshal(b, m, deterministic)
}
func (m *FulfillmentId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FulfillmentId.Merge(m, src)
}
func (m *FulfillmentId) XXX_Size() int {
	return xxx_messageInfo_FulfillmentId.Size(m)
}
func (m *FulfillmentId) XXX_DiscardUnknown() {
	xxx_messageInfo_FulfillmentId.DiscardUnknown(m)
}

var xxx_messageInfo_FulfillmentId proto.InternalMessageInfo

func (m *FulfillmentId) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *FulfillmentId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Fulfillment struct {
	DomainId             int64                `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Id                   int64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	OrderId              int64                `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status               string               `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	TrackingCompany      string               `protobuf:"bytes,11,opt,name=tracking_company,json=trackingCompany,proto3" json:"tracking_company,omitempty"`
	TrackingNumber       string               `protobuf:"bytes,12,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
	TrackingUrl          string               `protobuf:"bytes,13,opt,name=tracking_url,json=trackingUrl,proto3" json:"tracking_url,omitempty"`
	LineItemIds          []int64              `protobuf:"varint,20,rep,packed,name=line_item_ids,json=lineItemIds,proto3" json:"line_item_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Fulfillment) Reset()         { *m = Fulfillment{} }
func (m *Fulfillment) String() string { return proto.CompactTextString(m) }
func (*Fulfillment) ProtoMessage()    {}
func (*Fulfillment) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6eb07998aecd5ff, []int{1}
}

func (m *Fulfillment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fulfillment.Unmarshal(m, b)
}
func (m *Fulfillment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fulfillment.Marshal(b, m, deterministic)
}
func (m *Fulfillment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fulfillment.Merge(m, src)
}
func (m *Fulfillment) XXX_Size() int {
	return xxx_messageInfo_Fulfillment.Size(m)
}
func (m *Fulfillment) XXX_DiscardUnknown() {
	xxx_messageInfo_Fulfillment.DiscardUnknown(m)
}

var xxx_messageInfo_Fulfillment proto.InternalMessageInfo

func (m *Fulfillment) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *Fulfillment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Fulfillment) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Fulfillment) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Fulfillment) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Fulfillment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Fulfillment) GetTrackingCompany() string {
	if m != nil {
		return m.TrackingCompany
	}
	return ""
}

func (m *Fulfillment) GetTrackingNumber() string {
	if m != nil {
		return m.TrackingNumber
	}
	return ""
}

func (m *Fulfillment) GetTrackingUrl() string {
	if m != nil {
		return m.TrackingUrl
	}
	return ""
}

func (m *Fulfillment) GetLineItemIds() []int64 {
	if m != nil {
		return m.LineItemIds
	}
	return nil
}

func init() {
	proto.RegisterType((*FulfillmentId)(nil), "FulfillmentId")
	proto.RegisterType((*Fulfillment)(nil), "Fulfillment")
}

func init() { proto.RegisterFile("proto/fulfillments.proto", fileDescriptor_f6eb07998aecd5ff) }

var fileDescriptor_f6eb07998aecd5ff = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0xab, 0xd4, 0x30,
	0x14, 0x86, 0x69, 0x0b, 0xb5, 0x3d, 0xed, 0x8c, 0x12, 0xe4, 0x12, 0x7b, 0x17, 0xd6, 0x51, 0xb0,
	0x6e, 0x3a, 0x72, 0x5d, 0x09, 0x6e, 0xae, 0xd7, 0x0f, 0xba, 0x71, 0x51, 0xbc, 0x1b, 0x37, 0xa5,
	0x33, 0xc9, 0x0c, 0xc1, 0xa4, 0x2d, 0xc9, 0xe9, 0x62, 0x7e, 0x96, 0x7f, 0x50, 0xa4, 0x69, 0x3b,
	0xce, 0x38, 0xa0, 0xb8, 0x3c, 0x4f, 0x9e, 0x37, 0xf0, 0x26, 0x07, 0x68, 0xa7, 0x5b, 0x6c, 0xd7,
	0xbb, 0x5e, 0xee, 0x84, 0x94, 0x8a, 0x37, 0x68, 0x72, 0x8b, 0x92, 0xa7, 0xfb, 0xb6, 0xdd, 0x4b,
	0xbe, 0xb6, 0xd3, 0xa6, 0xdf, 0xad, 0x51, 0x28, 0x6e, 0xb0, 0x56, 0xdd, 0x24, 0x5c, 0xff, 0x29,
	0x70, 0xd5, 0xe1, 0x61, 0x3c, 0x5c, 0xbd, 0x83, 0xc5, 0xa7, 0xdf, 0x77, 0x16, 0x8c, 0x5c, 0x43,
	0xc8, 0x5a, 0x55, 0x8b, 0xa6, 0x12, 0x8c, 0x3a, 0xa9, 0x93, 0x79, 0x65, 0x30, 0x82, 0x82, 0x91,
	0x25, 0xb8, 0x82, 0x51, 0xd7, 0x52, 0x57, 0xb0, 0xd5, 0x4f, 0x17, 0xa2, 0x93, 0xf8, 0x7f, 0x85,
	0xc9, 0x13, 0x08, 0x5a, 0xcd, 0xb8, 0x1e, 0x5c, 0xcf, 0xd2, 0x07, 0x76, 0x2e, 0x18, 0x79, 0x0b,
	0xb0, 0xd5, 0xbc, 0x46, 0xce, 0xaa, 0x1a, 0x69, 0x90, 0x3a, 0x59, 0x74, 0x93, 0xe4, 0x63, 0x8f,
	0x7c, 0xee, 0x91, 0x7f, 0x9d, 0x8b, 0x96, 0xe1, 0x64, 0xdf, 0xe2, 0x10, 0xed, 0x3b, 0x36, 0x47,
	0xc3, 0x7f, 0x47, 0x27, 0xfb, 0x16, 0xc9, 0x15, 0xf8, 0x06, 0x6b, 0xec, 0x0d, 0x85, 0xd4, 0xc9,
	0xc2, 0x72, 0x9a, 0xc8, 0x2b, 0x78, 0x84, 0xba, 0xde, 0x7e, 0x17, 0xcd, 0xbe, 0xda, 0xb6, 0xaa,
	0xab, 0x9b, 0x03, 0x8d, 0xac, 0xf1, 0x70, 0xe6, 0x77, 0x23, 0x26, 0x2f, 0xe1, 0x88, 0xaa, 0xa6,
	0x57, 0x1b, 0xae, 0x69, 0x6c, 0xcd, 0xe5, 0x8c, 0xbf, 0x58, 0x4a, 0x9e, 0x41, 0x7c, 0x14, 0x7b,
	0x2d, 0xe9, 0xc2, 0x5a, 0xd1, 0xcc, 0xee, 0xb5, 0x24, 0x2b, 0x58, 0x48, 0xd1, 0xf0, 0x4a, 0x20,
	0x57, 0x95, 0x60, 0x86, 0x3e, 0x4e, 0xbd, 0xcc, 0x2b, 0xa3, 0x01, 0x16, 0xc8, 0x55, 0xc1, 0xcc,
	0xcd, 0x0f, 0x07, 0xe2, 0x93, 0x0f, 0x30, 0xe4, 0x05, 0xf8, 0x77, 0xf6, 0x2d, 0x48, 0x9c, 0x9f,
	0x1c, 0x24, 0x67, 0xd3, 0x60, 0xdd, 0xdb, 0xda, 0x7f, 0xb5, 0x5e, 0x83, 0xff, 0x81, 0x4b, 0x8e,
	0x9c, 0x2c, 0xf3, 0xb3, 0x25, 0x49, 0xae, 0x2e, 0x1e, 0xf4, 0xe3, 0xb0, 0x53, 0xe4, 0x39, 0x78,
	0x9f, 0x39, 0x5e, 0xe8, 0x67, 0xd7, 0xbe, 0x0f, 0xbe, 0xf9, 0xf6, 0x9f, 0xcd, 0xc6, 0xb7, 0xf1,
	0x37, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x10, 0x6b, 0x01, 0xdd, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FulfillmentsClient is the client API for Fulfillments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FulfillmentsClient interface {
	Create(ctx context.Context, in *Fulfillment, opts ...grpc.CallOption) (*Fulfillment, error)
	Update(ctx context.Context, in *Fulfillment, opts ...grpc.CallOption) (*Fulfillment, error)
	Delete(ctx context.Context, in *FulfillmentId, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *FulfillmentId, opts ...grpc.CallOption) (*Fulfillment, error)
}

type fulfillmentsClient struct {
	cc *grpc.ClientConn
}

func NewFulfillmentsClient(cc *grpc.ClientConn) FulfillmentsClient {
	return &fulfillmentsClient{cc}
}

func (c *fulfillmentsClient) Create(ctx context.Context, in *Fulfillment, opts ...grpc.CallOption) (*Fulfillment, error) {
	out := new(Fulfillment)
	err := c.cc.Invoke(ctx, "/Fulfillments/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentsClient) Update(ctx context.Context, in *Fulfillment, opts ...grpc.CallOption) (*Fulfillment, error) {
	out := new(Fulfillment)
	err := c.cc.Invoke(ctx, "/Fulfillments/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentsClient) Delete(ctx context.Context, in *FulfillmentId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Fulfillments/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentsClient) Get(ctx context.Context, in *FulfillmentId, opts ...grpc.CallOption) (*Fulfillment, error) {
	out := new(Fulfillment)
	err := c.cc.Invoke(ctx, "/Fulfillments/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulfillmentsServer is the server API for Fulfillments service.
type FulfillmentsServer interface {
	Create(context.Context, *Fulfillment) (*Fulfillment, error)
	Update(context.Context, *Fulfillment) (*Fulfillment, error)
	Delete(context.Context, *FulfillmentId) (*empty.Empty, error)
	Get(context.Context, *FulfillmentId) (*Fulfillment, error)
}

// UnimplementedFulfillmentsServer can be embedded to have forward compatible implementations.
type UnimplementedFulfillmentsServer struct {
}

func (*UnimplementedFulfillmentsServer) Create(ctx context.Context, req *Fulfillment) (*Fulfillment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedFulfillmentsServer) Update(ctx context.Context, req *Fulfillment) (*Fulfillment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedFulfillmentsServer) Delete(ctx context.Context, req *FulfillmentId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedFulfillmentsServer) Get(ctx context.Context, req *FulfillmentId) (*Fulfillment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterFulfillmentsServer(s *grpc.Server, srv FulfillmentsServer) {
	s.RegisterService(&_Fulfillments_serviceDesc, srv)
}

func _Fulfillments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fulfillment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulfillments/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentsServer).Create(ctx, req.(*Fulfillment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulfillments_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fulfillment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulfillments/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentsServer).Update(ctx, req.(*Fulfillment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulfillments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FulfillmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulfillments/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentsServer).Delete(ctx, req.(*FulfillmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulfillments_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FulfillmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulfillments/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentsServer).Get(ctx, req.(*FulfillmentId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fulfillments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Fulfillments",
	HandlerType: (*FulfillmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Fulfillments_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Fulfillments_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Fulfillments_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Fulfillments_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fulfillments.proto",
}
