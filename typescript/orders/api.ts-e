/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OrdersAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@meshify.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    provinceCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    province?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    longitude?: number;
}

/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Customer
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Customer
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    phone?: string;
    /**
     * 
     * @type {Address}
     * @memberof Customer
     */
    defaultAddress?: Address;
}

/**
 * 
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    fqdn?: string;
    /**
     * 
     * @type {Date}
     * @memberof Domain
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Domain
     */
    updatedAt?: Date;
}

/**
 * 
 * @export
 * @interface Fulfillment
 */
export interface Fulfillment {
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    orderId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Fulfillment
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Fulfillment
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    trackingCompany?: string;
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    trackingNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Fulfillment
     */
    trackingUrl?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    lineItemIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    fulfillableQuantity?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LineItem
     */
    requiresShipping?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    fulfillmentService?: string;
}

/**
 * 
 * @export
 * @interface ListCustomersResponse
 */
export interface ListCustomersResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Customer>}
     * @memberof ListCustomersResponse
     */
    customers?: Array<Customer>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListCustomersResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListLineItemsResponse
 */
export interface ListLineItemsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<LineItem>}
     * @memberof ListLineItemsResponse
     */
    lineItems?: Array<LineItem>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListLineItemsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListOrdersResponse
 */
export interface ListOrdersResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Order>}
     * @memberof ListOrdersResponse
     */
    orders?: Array<Order>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListOrdersResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    domainId?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderNumber?: string;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    processedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    closedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    cancelledAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    number?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    cancelReason?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    appId?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    processingMethod?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    sourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    contactEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderStatusUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    customerId?: string;
    /**
     * ID of folder that order belongs to.
     * @type {number}
     * @memberof Order
     */
    folderId?: number;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    billingAddress?: Address;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    shippingAddress?: Address;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    lineItemIds?: Array<string>;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    typeUrl?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}

/**
 * paths: \"f.a\"     paths: \"f.b.d\"  Here `f` represents a field in some root message, `a` and `b` fields in the message found in `f`, and `d` a field found in the message in `f.b`.  Field masks are used to specify a subset of fields that should be returned by a get operation or modified by an update operation. Field masks also have a custom JSON encoding (see below).  # Field Masks in Projections  When used in the context of a projection, a response message or sub-message is filtered by the API to only contain those fields as specified in the mask. For example, if the mask in the previous example is applied to a response message as follows:      f {       a : 22       b {         d : 1         x : 2       }       y : 13     }     z: 8  The result will not contain specific values for fields x,y and z (their value will be set to the default, and omitted in proto text output):       f {       a : 22       b {         d : 1       }     }  A repeated field is not allowed except at the last position of a paths string.  If a FieldMask object is not present in a get operation, the operation applies to all fields (as if a FieldMask of all fields had been specified).  Note that a field mask does not necessarily apply to the top-level response message. In case of a REST get operation, the field mask applies directly to the response, but in case of a REST list operation, the mask instead applies to each individual message in the returned resource list. In case of a REST custom method, other definitions may be used. Where the mask applies will be clearly documented together with its declaration in the API.  In any case, the effect on the returned resource/resources is required behavior for APIs.  # Field Masks in Update Operations  A field mask in update operations specifies which fields of the targeted resource are going to be updated. The API is required to only change the values of the fields as specified in the mask and leave the others untouched. If a resource is passed in to describe the updated values, the API ignores the values of all fields not covered by the mask.  If a repeated field is specified for an update operation, new values will be appended to the existing repeated field in the target resource. Note that a repeated field is only allowed in the last position of a `paths` string.  If a sub-message is specified in the last position of the field mask for an update operation, then new value will be merged into the existing sub-message in the target resource.  For example, given the target message:      f {       b {         d: 1         x: 2       }       c: [1]     }  And an update message:      f {       b {         d: 10       }       c: [2]     }  then if the field mask is:   paths: [\"f.b\", \"f.c\"]  then the result will be:      f {       b {         d: 10         x: 2       }       c: [1, 2]     }  An implementation may provide options to override this default behavior for repeated and message fields.  In order to reset a field's value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below.  If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not.  As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API.  ## Considerations for HTTP REST  The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates).  # JSON Encoding of Field Masks  In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions.  As an example, consider the following message declarations:      message Profile {       User user = 1;       Photo photo = 2;     }     message User {       string display_name = 1;       string address = 2;     }  In proto a field mask for `Profile` may look as such:      mask {       paths: \"user.display_name\"       paths: \"photo\"     }  In JSON, the same mask is represented as below:      {       mask: \"user.displayName,photo\"     }  # Field Masks and Oneof Fields  Field masks treat fields in oneofs just as regular fields. Consider the following message:      message SampleMessage {       oneof test_oneof {         string name = 4;         SubMessage sub_message = 9;       }     }  The field mask can be:      mask {       paths: \"name\"     }  Or:      mask {       paths: \"sub_message\"     }  Note that oneof type names (\"test_oneof\" in this case) cannot be used in paths.  ## Field Mask Verification  The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is unmappable.
 * @export
 * @interface ProtobufFieldMask
 */
export interface ProtobufFieldMask {
    /**
     * The set of field mask paths.
     * @type {Array<string>}
     * @memberof ProtobufFieldMask
     */
    paths?: Array<string>;
}

/**
 * 
 * @export
 * @interface RuntimeError
 */
export interface RuntimeError {
    /**
     * 
     * @type {string}
     * @memberof RuntimeError
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof RuntimeError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof RuntimeError
     */
    message?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RuntimeError
     */
    details?: Array<ProtobufAny>;
}

/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof Tenant
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Tenant
     */
    updatedAt?: Date;
}

/**
 * 
 * @export
 * @interface UpdateCustomerRequest
 */
export interface UpdateCustomerRequest {
    /**
     * The customer resource which replaces the resource on the server.
     * @type {Customer}
     * @memberof UpdateCustomerRequest
     */
    customer?: Customer;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateCustomerRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateLineItemRequest
 */
export interface UpdateLineItemRequest {
    /**
     * The line_item resource which replaces the resource on the server.
     * @type {LineItem}
     * @memberof UpdateLineItemRequest
     */
    lineItem?: LineItem;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateLineItemRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateOrderRequest
 */
export interface UpdateOrderRequest {
    /**
     * The order resource which replaces the resource on the server.
     * @type {Order}
     * @memberof UpdateOrderRequest
     */
    order?: Order;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateOrderRequest
     */
    updateMask?: ProtobufFieldMask;
}


/**
 * OrderServiceApi - fetch parameter creator
 * @export
 */
export const OrderServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Customer} body The customer resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(body: Customer, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCustomer.');
            }
            const localVarPath = `/v1/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LineItem} body The line_item resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItem(body: LineItem, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLineItem.');
            }
            const localVarPath = `/v1/line_items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Order} body The order resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Order, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrder.');
            }
            const localVarPath = `/v1/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId The resource id of the customer to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(customerId: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling deleteCustomer.');
            }
            const localVarPath = `/v1/customers/{customer_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineItemId The resource id of the line_item to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItem(lineItemId: string, options: any = {}): FetchArgs {
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling deleteLineItem.');
            }
            const localVarPath = `/v1/line_items/{line_item_id}`
                .replace(`{${"line_item_id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId The resource id of the order to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrder.');
            }
            const localVarPath = `/v1/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getCustomer.');
            }
            const localVarPath = `/v1/customers/{customer_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(lineItemId: string, options: any = {}): FetchArgs {
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling getLineItem.');
            }
            const localVarPath = `/v1/line_items/{line_item_id}`
                .replace(`{${"line_item_id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId The field will contain id of order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrder.');
            }
            const localVarPath = `/v1/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [parent] The parent resource name, for example, \&quot;shelves/shelf1\&quot;.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItems(parent?: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/line_items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {UpdateCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(customerId: string, body: UpdateCustomerRequest, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling updateCustomer.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCustomer.');
            }
            const localVarPath = `/v1/customers/{customer.id}`
                .replace(`{${"customer.id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineItemId 
         * @param {UpdateLineItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options: any = {}): FetchArgs {
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling updateLineItem.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateLineItem.');
            }
            const localVarPath = `/v1/line_items/{line_item.id}`
                .replace(`{${"line_item.id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {UpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, body: UpdateOrderRequest, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrder.');
            }
            const localVarPath = `/v1/orders/{order.id}`
                .replace(`{${"order.id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderServiceApi - functional programming interface
 * @export
 */
export const OrderServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Customer} body The customer resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(body: Customer, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).createCustomer(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {LineItem} body The line_item resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItem(body: LineItem, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).createLineItem(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Order} body The order resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Order, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).createOrder(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} customerId The resource id of the customer to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(customerId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).deleteCustomer(customerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} lineItemId The resource id of the line_item to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItem(lineItemId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).deleteLineItem(lineItemId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} orderId The resource id of the order to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).deleteOrder(orderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).getCustomer(customerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(lineItemId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).getLineItem(lineItemId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} orderId The field will contain id of order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).getOrder(orderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListCustomersResponse> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).listCustomers(pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [parent] The parent resource name, for example, \&quot;shelves/shelf1\&quot;.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItems(parent?: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListLineItemsResponse> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).listLineItems(parent, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListOrdersResponse> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).listOrders(pageSize, pageToken, domainId, folderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} customerId 
         * @param {UpdateCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).updateCustomer(customerId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} lineItemId 
         * @param {UpdateLineItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).updateLineItem(lineItemId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {UpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrderServiceApiFetchParamCreator(configuration).updateOrder(orderId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrderServiceApi - factory interface
 * @export
 */
export const OrderServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {Customer} body The customer resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(body: Customer, options?: any) {
            return OrderServiceApiFp(configuration).createCustomer(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {LineItem} body The line_item resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItem(body: LineItem, options?: any) {
            return OrderServiceApiFp(configuration).createLineItem(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Order} body The order resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Order, options?: any) {
            return OrderServiceApiFp(configuration).createOrder(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} customerId The resource id of the customer to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(customerId: string, options?: any) {
            return OrderServiceApiFp(configuration).deleteCustomer(customerId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} lineItemId The resource id of the line_item to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItem(lineItemId: string, options?: any) {
            return OrderServiceApiFp(configuration).deleteLineItem(lineItemId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} orderId The resource id of the order to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options?: any) {
            return OrderServiceApiFp(configuration).deleteOrder(orderId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, options?: any) {
            return OrderServiceApiFp(configuration).getCustomer(customerId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(lineItemId: string, options?: any) {
            return OrderServiceApiFp(configuration).getLineItem(lineItemId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} orderId The field will contain id of order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options?: any) {
            return OrderServiceApiFp(configuration).getOrder(orderId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(pageSize?: number, pageToken?: string, options?: any) {
            return OrderServiceApiFp(configuration).listCustomers(pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [parent] The parent resource name, for example, \&quot;shelves/shelf1\&quot;.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItems(parent?: string, pageSize?: number, pageToken?: string, options?: any) {
            return OrderServiceApiFp(configuration).listLineItems(parent, pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any) {
            return OrderServiceApiFp(configuration).listOrders(pageSize, pageToken, domainId, folderId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} customerId 
         * @param {UpdateCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any) {
            return OrderServiceApiFp(configuration).updateCustomer(customerId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} lineItemId 
         * @param {UpdateLineItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options?: any) {
            return OrderServiceApiFp(configuration).updateLineItem(lineItemId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {UpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, body: UpdateOrderRequest, options?: any) {
            return OrderServiceApiFp(configuration).updateOrder(orderId, body, options)(fetch, basePath);
        },
    };
};

/**
 * OrderServiceApi - object-oriented interface
 * @export
 * @class OrderServiceApi
 * @extends {BaseAPI}
 */
export class OrderServiceApi extends BaseAPI {
    /**
     * 
     * @param {Customer} body The customer resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public createCustomer(body: Customer, options?: any) {
        return OrderServiceApiFp(this.configuration).createCustomer(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {LineItem} body The line_item resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public createLineItem(body: LineItem, options?: any) {
        return OrderServiceApiFp(this.configuration).createLineItem(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Order} body The order resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public createOrder(body: Order, options?: any) {
        return OrderServiceApiFp(this.configuration).createOrder(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} customerId The resource id of the customer to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public deleteCustomer(customerId: string, options?: any) {
        return OrderServiceApiFp(this.configuration).deleteCustomer(customerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} lineItemId The resource id of the line_item to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public deleteLineItem(lineItemId: string, options?: any) {
        return OrderServiceApiFp(this.configuration).deleteLineItem(lineItemId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} orderId The resource id of the order to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public deleteOrder(orderId: string, options?: any) {
        return OrderServiceApiFp(this.configuration).deleteOrder(orderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} customerId The field will contain id of the resource requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public getCustomer(customerId: string, options?: any) {
        return OrderServiceApiFp(this.configuration).getCustomer(customerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} lineItemId The field will contain id of the resource requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public getLineItem(lineItemId: string, options?: any) {
        return OrderServiceApiFp(this.configuration).getLineItem(lineItemId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} orderId The field will contain id of order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public getOrder(orderId: string, options?: any) {
        return OrderServiceApiFp(this.configuration).getOrder(orderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public listCustomers(pageSize?: number, pageToken?: string, options?: any) {
        return OrderServiceApiFp(this.configuration).listCustomers(pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [parent] The parent resource name, for example, \&quot;shelves/shelf1\&quot;.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public listLineItems(parent?: string, pageSize?: number, pageToken?: string, options?: any) {
        return OrderServiceApiFp(this.configuration).listLineItems(parent, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
     * @param {string} [folderId] The folder_id adds filtering by folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any) {
        return OrderServiceApiFp(this.configuration).listOrders(pageSize, pageToken, domainId, folderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} customerId 
     * @param {UpdateCustomerRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any) {
        return OrderServiceApiFp(this.configuration).updateCustomer(customerId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} lineItemId 
     * @param {UpdateLineItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options?: any) {
        return OrderServiceApiFp(this.configuration).updateLineItem(lineItemId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} orderId 
     * @param {UpdateOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceApi
     */
    public updateOrder(orderId: string, body: UpdateOrderRequest, options?: any) {
        return OrderServiceApiFp(this.configuration).updateOrder(orderId, body, options)(this.fetch, this.basePath);
    }

}

