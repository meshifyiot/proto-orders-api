/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OrdersAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0
 * Contact: dev@meshify.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The Shopify domain to which address record belongs to.
     * @type {string}
     * @memberof Address
     */
    domainId?: string;
    /**
     * The full name of the person associated with the payment method.
     * @type {string}
     * @memberof Address
     */
    name?: string;
    /**
     * The phone number at the shipping address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
    /**
     * The company of the person associated with the shipping address.
     * @type {string}
     * @memberof Address
     */
    company?: string;
    /**
     * The first name of the person associated with the shipping address.
     * @type {string}
     * @memberof Address
     */
    firstName?: string;
    /**
     * The last name of the person associated with the shipping address.
     * @type {string}
     * @memberof Address
     */
    lastName?: string;
    /**
     * The street address of the shipping address.
     * @type {string}
     * @memberof Address
     */
    address1?: string;
    /**
     * An optional additional field for the street address of the  shipping address.
     * @type {string}
     * @memberof Address
     */
    address2?: string;
    /**
     * The city, town, or village of the shipping address.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The two-letter abbreviation of the region of the shipping address.
     * @type {string}
     * @memberof Address
     */
    provinceCode?: string;
    /**
     * The name of the region (province, state, prefecture, …) of the  shipping address.
     * @type {string}
     * @memberof Address
     */
    province?: string;
    /**
     * The postal code (zip, postcode, Eircode, …) of the shipping address.
     * @type {string}
     * @memberof Address
     */
    zip?: string;
    /**
     * The two-letter code (ISO 3166-1 format) for the country of the  shipping address.
     * @type {string}
     * @memberof Address
     */
    countryCode?: string;
    /**
     * The name of the country of the shipping address.
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * The latitude of the shipping address.
     * @type {number}
     * @memberof Address
     */
    latitude?: number;
    /**
     * The longitude of the shipping address.
     * @type {number}
     * @memberof Address
     */
    longitude?: number;
}

/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * The Shopify domain to which customer record belongs to.
     * @type {string}
     * @memberof Customer
     */
    domainId?: string;
    /**
     * A unique identifier for the customer.
     * @type {string}
     * @memberof Customer
     */
    id?: string;
    /**
     * The date and time when the customer was created.
     * @type {Date}
     * @memberof Customer
     */
    createdAt?: Date;
    /**
     * The date and time when the customer information was last updated.
     * @type {Date}
     * @memberof Customer
     */
    updatedAt?: Date;
    /**
     * The unique email address of the customer.
     * @type {string}
     * @memberof Customer
     */
    email?: string;
    /**
     * The customer's first name.
     * @type {string}
     * @memberof Customer
     */
    firstName?: string;
    /**
     * The customer's last name.
     * @type {string}
     * @memberof Customer
     */
    lastName?: string;
    /**
     * The state of the customer's account with a shop. Default value: disabled. Valid values: disabled: The customer doesn't have an active account.    Customer accounts can be disabled from the Shopify admin at any time. invited: The customer has received an email invite to create an account. enabled: The customer has created an account. declined: The customer declined the email invite to create an account.
     * @type {string}
     * @memberof Customer
     */
    state?: string;
    /**
     * A note about the customer.
     * @type {string}
     * @memberof Customer
     */
    note?: string;
    /**
     * The unique phone number (E.164 format) for this customer.
     * @type {string}
     * @memberof Customer
     */
    phone?: string;
    /**
     * The default address for the customer.
     * @type {Address}
     * @memberof Customer
     */
    defaultAddress?: Address;
}

/**
 * 
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * The domain ID.
     * @type {string}
     * @memberof Domain
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    fqdn?: string;
    /**
     * The date and time when the domain was created.
     * @type {Date}
     * @memberof Domain
     */
    createdAt?: Date;
    /**
     * The date and time when the domain was updated.
     * @type {Date}
     * @memberof Domain
     */
    updatedAt?: Date;
}

/**
 * 
 * @export
 * @interface Fulfillment
 */
export interface Fulfillment {
    /**
     * The Shopify domain to which fulfillment record belongs to.
     * @type {string}
     * @memberof Fulfillment
     */
    domainId?: string;
    /**
     * The ID for the fulfillment.
     * @type {string}
     * @memberof Fulfillment
     */
    id?: string;
    /**
     * The unique numeric identifier for the order.
     * @type {string}
     * @memberof Fulfillment
     */
    orderId?: string;
    /**
     * The date and time when the fulfillment was created.
     * @type {Date}
     * @memberof Fulfillment
     */
    createdAt?: Date;
    /**
     * The date and time when the fulfillment was updated.
     * @type {Date}
     * @memberof Fulfillment
     */
    updatedAt?: Date;
    /**
     * The status of the fulfillment. Valid values: pending: The fulfillment is pending. open: The fulfillment has been acknowledged by the service and is   in processing. success: The fulfillment was successful. cancelled: The fulfillment was cancelled. error: There was an error with the fulfillment request. failure: The fulfillment request failed.
     * @type {string}
     * @memberof Fulfillment
     */
    status?: string;
    /**
     * The name of the tracking company.
     * @type {string}
     * @memberof Fulfillment
     */
    trackingCompany?: string;
    /**
     * A list of tracking numbers, provided by the shipping company.
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    trackingNumbers?: Array<string>;
    /**
     * The URLs of tracking pages for the fulfillment.
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    trackingUrls?: Array<string>;
    /**
     * A historical record of each item in the fulfillment.
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    lineItemIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     * The Shopify domain to which line_item record belongs to.
     * @type {string}
     * @memberof LineItem
     */
    domainId?: string;
    /**
     * The ID of the line item.
     * @type {string}
     * @memberof LineItem
     */
    id?: string;
    /**
     * The number of items that were purchased.
     * @type {string}
     * @memberof LineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    fulfillableQuantity?: string;
    /**
     * Whether the item requires shipping.
     * @type {boolean}
     * @memberof LineItem
     */
    requiresShipping?: boolean;
    /**
     * The name of the product variant.
     * @type {string}
     * @memberof LineItem
     */
    name?: string;
    /**
     * The title of the product.
     * @type {string}
     * @memberof LineItem
     */
    title?: string;
    /**
     * The item's SKU (stock keeping unit).
     * @type {string}
     * @memberof LineItem
     */
    sku?: string;
    /**
     * The service provider that's fulfilling the item. Valid values:  manual, or the name of the provider, such as amazon or shipwire.
     * @type {string}
     * @memberof LineItem
     */
    fulfillmentService?: string;
}

/**
 * 
 * @export
 * @interface ListCustomersResponse
 */
export interface ListCustomersResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Customer>}
     * @memberof ListCustomersResponse
     */
    customers?: Array<Customer>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListCustomersResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListDomainsResponse
 */
export interface ListDomainsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Domain>}
     * @memberof ListDomainsResponse
     */
    domains?: Array<Domain>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListDomainsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListFulfillmentsResponse
 */
export interface ListFulfillmentsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Fulfillment>}
     * @memberof ListFulfillmentsResponse
     */
    fulfillments?: Array<Fulfillment>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListFulfillmentsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListLineItemsResponse
 */
export interface ListLineItemsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<LineItem>}
     * @memberof ListLineItemsResponse
     */
    lineItems?: Array<LineItem>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListLineItemsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListOrdersResponse
 */
export interface ListOrdersResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Order>}
     * @memberof ListOrdersResponse
     */
    orders?: Array<Order>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListOrdersResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface NoteAttribute
 */
export interface NoteAttribute {
    /**
     * 
     * @type {string}
     * @memberof NoteAttribute
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteAttribute
     */
    value?: string;
}

/**
 * An order is a customer's completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provide an email address or phone number, billing address and payment information.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The Shopify domain to which order belongs to.
     * @type {string}
     * @memberof Order
     */
    domainId?: string;
    /**
     * The Shopify ID of the order.
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * Customer facing order ID, used by the shop owner and customer.
     * @type {string}
     * @memberof Order
     */
    orderNumber?: string;
    /**
     * The customer's email address.
     * @type {string}
     * @memberof Order
     */
    email?: string;
    /**
     * The order's position in the shop's count of orders.  Numbers are sequential and start at 1.
     * @type {string}
     * @memberof Order
     */
    number?: string;
    /**
     * An optional note that a shop owner can attach to the order.
     * @type {string}
     * @memberof Order
     */
    note?: string;
    /**
     * A unique token for the order.
     * @type {string}
     * @memberof Order
     */
    token?: string;
    /**
     * The autogenerated date and time when the order was created in Shopify.  The value for this property cannot be changed.
     * @type {Date}
     * @memberof Order
     */
    createdAt?: Date;
    /**
     * The date and time when an order was processed.  This value is the date that appears on your orders and that's used in  the analytic reports. By default, it matches the created_at value.
     * @type {Date}
     * @memberof Order
     */
    processedAt?: Date;
    /**
     * The date and time when the order was last modified. Its value can change when no visible fields of an order have been updated.
     * @type {Date}
     * @memberof Order
     */
    updatedAt?: Date;
    /**
     * The date and time when the order was closed.
     * @type {Date}
     * @memberof Order
     */
    closedAt?: Date;
    /**
     * The date and time when the order was canceled.
     * @type {Date}
     * @memberof Order
     */
    cancelledAt?: Date;
    /**
     * The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings. This is different from the id property, which is the ID of the order used by the Shopify API. This field can also be set by the Shopify API  to be any string value.
     * @type {string}
     * @memberof Order
     */
    name?: string;
    /**
     * The reason why the order was canceled. Valid values: customer: The customer canceled the order. fraud: The order was fraudulent. inventory: Items in the order were not in inventory. declined: The payment was declined. other: A reason not in this list.
     * @type {string}
     * @memberof Order
     */
    cancelReason?: string;
    /**
     * The ID of the Shopify app that created the order.
     * @type {string}
     * @memberof Order
     */
    appId?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    contactEmail?: string;
    /**
     * The mailing address to where the order will be shipped.  This address is optional and will not be available on orders that  do not require shipping.
     * @type {Address}
     * @memberof Order
     */
    shippingAddress?: Address;
    /**
     * A list of line item objects, each containing information about an item in the order.
     * @type {Array<string>}
     * @memberof Order
     */
    lineItemIds?: Array<string>;
    /**
     * Information about the customer. The order might not have a customer  and apps should not depend on the existence of a customer object.  This value might be null if the order was created through Shopify POS.
     * @type {string}
     * @memberof Order
     */
    customerId?: string;
    /**
     * ID of folder that order belongs to.
     * @type {number}
     * @memberof Order
     */
    folderId?: number;
    /**
     * Whether this is a test order.
     * @type {boolean}
     * @memberof Order
     */
    test?: boolean;
    /**
     * The sum of all line item prices, discounts, shipping, taxes, and tips  in the shop currency (in cents). Must be positive.
     * @type {string}
     * @memberof Order
     */
    totalPrice?: string;
    /**
     * The price of the order in the shop currency (in cents) after discounts  but before shipping, taxes, and tips.
     * @type {string}
     * @memberof Order
     */
    subtotalPrice?: string;
    /**
     * The sum of all line item weights in grams.
     * @type {string}
     * @memberof Order
     */
    totalWeight?: string;
    /**
     * The sum of all the taxes applied to the order in th shop currency  (in cents). Must be positive.
     * @type {string}
     * @memberof Order
     */
    totalTax?: string;
    /**
     * Whether taxes are included in the order subtotal.
     * @type {boolean}
     * @memberof Order
     */
    taxesIncluded?: boolean;
    /**
     * The three-letter code (ISO 4217 format) for the shop currency.
     * @type {string}
     * @memberof Order
     */
    currency?: string;
    /**
     * The status of payments associated with the order.  Can only be set when the order is created. Valid values: pending: The payments are pending. Payment might fail in this state.   Check again to confirm whether the payments have been paid successfully. authorized: The payments have been authorized. partially_paid: The order have been partially paid. paid: The payments have been paid. partially_refunded: The payments have been partially refunded. refunded: The payments have been refunded. voided: The payments have been voided.
     * @type {string}
     * @memberof Order
     */
    financialStatus?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    confirmed?: boolean;
    /**
     * The sum of all line item prices, discounts, shipping, taxes, and tips  in the in USD cents. Must be positive.
     * @type {string}
     * @memberof Order
     */
    totalPriceUsd?: string;
    /**
     * Extra information that is added to the order. Appears in the Additional details section of an order details page. Each array entry must contain a hash with name and value keys.
     * @type {Array<NoteAttribute>}
     * @memberof Order
     */
    noteAttributes?: Array<NoteAttribute>;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    typeUrl?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}

/**
 * paths: \"f.a\"     paths: \"f.b.d\"  Here `f` represents a field in some root message, `a` and `b` fields in the message found in `f`, and `d` a field found in the message in `f.b`.  Field masks are used to specify a subset of fields that should be returned by a get operation or modified by an update operation. Field masks also have a custom JSON encoding (see below).  # Field Masks in Projections  When used in the context of a projection, a response message or sub-message is filtered by the API to only contain those fields as specified in the mask. For example, if the mask in the previous example is applied to a response message as follows:      f {       a : 22       b {         d : 1         x : 2       }       y : 13     }     z: 8  The result will not contain specific values for fields x,y and z (their value will be set to the default, and omitted in proto text output):       f {       a : 22       b {         d : 1       }     }  A repeated field is not allowed except at the last position of a paths string.  If a FieldMask object is not present in a get operation, the operation applies to all fields (as if a FieldMask of all fields had been specified).  Note that a field mask does not necessarily apply to the top-level response message. In case of a REST get operation, the field mask applies directly to the response, but in case of a REST list operation, the mask instead applies to each individual message in the returned resource list. In case of a REST custom method, other definitions may be used. Where the mask applies will be clearly documented together with its declaration in the API.  In any case, the effect on the returned resource/resources is required behavior for APIs.  # Field Masks in Update Operations  A field mask in update operations specifies which fields of the targeted resource are going to be updated. The API is required to only change the values of the fields as specified in the mask and leave the others untouched. If a resource is passed in to describe the updated values, the API ignores the values of all fields not covered by the mask.  If a repeated field is specified for an update operation, new values will be appended to the existing repeated field in the target resource. Note that a repeated field is only allowed in the last position of a `paths` string.  If a sub-message is specified in the last position of the field mask for an update operation, then new value will be merged into the existing sub-message in the target resource.  For example, given the target message:      f {       b {         d: 1         x: 2       }       c: [1]     }  And an update message:      f {       b {         d: 10       }       c: [2]     }  then if the field mask is:   paths: [\"f.b\", \"f.c\"]  then the result will be:      f {       b {         d: 10         x: 2       }       c: [1, 2]     }  An implementation may provide options to override this default behavior for repeated and message fields.  In order to reset a field's value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below.  If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not.  As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API.  ## Considerations for HTTP REST  The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates).  # JSON Encoding of Field Masks  In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions.  As an example, consider the following message declarations:      message Profile {       User user = 1;       Photo photo = 2;     }     message User {       string display_name = 1;       string address = 2;     }  In proto a field mask for `Profile` may look as such:      mask {       paths: \"user.display_name\"       paths: \"photo\"     }  In JSON, the same mask is represented as below:      {       mask: \"user.displayName,photo\"     }  # Field Masks and Oneof Fields  Field masks treat fields in oneofs just as regular fields. Consider the following message:      message SampleMessage {       oneof test_oneof {         string name = 4;         SubMessage sub_message = 9;       }     }  The field mask can be:      mask {       paths: \"name\"     }  Or:      mask {       paths: \"sub_message\"     }  Note that oneof type names (\"test_oneof\" in this case) cannot be used in paths.  ## Field Mask Verification  The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is unmappable.
 * @export
 * @interface ProtobufFieldMask
 */
export interface ProtobufFieldMask {
    /**
     * The set of field mask paths.
     * @type {Array<string>}
     * @memberof ProtobufFieldMask
     */
    paths?: Array<string>;
}

/**
 * 
 * @export
 * @interface RuntimeError
 */
export interface RuntimeError {
    /**
     * 
     * @type {string}
     * @memberof RuntimeError
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof RuntimeError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof RuntimeError
     */
    message?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RuntimeError
     */
    details?: Array<ProtobufAny>;
}

/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * The TenantID.
     * @type {string}
     * @memberof Tenant
     */
    id?: string;
    /**
     * The name of tenant.
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface UpdateCustomerRequest
 */
export interface UpdateCustomerRequest {
    /**
     * The Shopify Domain.
     * @type {string}
     * @memberof UpdateCustomerRequest
     */
    domainId?: string;
    /**
     * The customer resource which replaces the resource on the server.
     * @type {Customer}
     * @memberof UpdateCustomerRequest
     */
    customer?: Customer;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateCustomerRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateDomainRequest
 */
export interface UpdateDomainRequest {
    /**
     * The domain resource which replaces the resource on the server.
     * @type {Domain}
     * @memberof UpdateDomainRequest
     */
    domain?: Domain;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateDomainRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateFulfillmentRequest
 */
export interface UpdateFulfillmentRequest {
    /**
     * The Shopify Domain.
     * @type {string}
     * @memberof UpdateFulfillmentRequest
     */
    domainId?: string;
    /**
     * The fulfillment resource which replaces the resource on the server.
     * @type {Fulfillment}
     * @memberof UpdateFulfillmentRequest
     */
    fulfillment?: Fulfillment;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateFulfillmentRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateLineItemRequest
 */
export interface UpdateLineItemRequest {
    /**
     * The Shopify Domain.
     * @type {string}
     * @memberof UpdateLineItemRequest
     */
    domainId?: string;
    /**
     * The line_item resource which replaces the resource on the server.
     * @type {LineItem}
     * @memberof UpdateLineItemRequest
     */
    lineItem?: LineItem;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateLineItemRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateOrderRequest
 */
export interface UpdateOrderRequest {
    /**
     * The Shopify Domain.
     * @type {string}
     * @memberof UpdateOrderRequest
     */
    domainId?: string;
    /**
     * The order resource which replaces the resource on the server.
     * @type {Order}
     * @memberof UpdateOrderRequest
     */
    order?: Order;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateOrderRequest
     */
    updateMask?: ProtobufFieldMask;
}


/**
 * OrdersServiceApi - fetch parameter creator
 * @export
 */
export const OrdersServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Customer} body The customer resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(body: Customer, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCustomer.');
            }
            const localVarPath = `/v1/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Domain} body The domain resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(body: Domain, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDomain.');
            }
            const localVarPath = `/v1/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Fulfillment} body The fulfillment resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillment(body: Fulfillment, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createFulfillment.');
            }
            const localVarPath = `/v1/fulfillments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LineItem} body The line_item resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItem(body: LineItem, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLineItem.');
            }
            const localVarPath = `/v1/line_items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Order} body The order resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Order, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrder.');
            }
            const localVarPath = `/v1/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId The resource id of the customer to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(customerId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling deleteCustomer.');
            }
            const localVarPath = `/v1/customers/{customer_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} domainId The resource id of the domain to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: string, options: any = {}): FetchArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling deleteDomain.');
            }
            const localVarPath = `/v1/domains/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fulfillmentId The resource id of the fulfillment to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFulfillment(fulfillmentId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'fulfillmentId' is not null or undefined
            if (fulfillmentId === null || fulfillmentId === undefined) {
                throw new RequiredError('fulfillmentId','Required parameter fulfillmentId was null or undefined when calling deleteFulfillment.');
            }
            const localVarPath = `/v1/fulfillments/{fulfillment_id}`
                .replace(`{${"fulfillment_id"}}`, encodeURIComponent(String(fulfillmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineItemId The resource id of the line_item to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItem(lineItemId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling deleteLineItem.');
            }
            const localVarPath = `/v1/line_items/{line_item_id}`
                .replace(`{${"line_item_id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId The resource id of the order to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrder.');
            }
            const localVarPath = `/v1/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getCustomer.');
            }
            const localVarPath = `/v1/customers/{customer_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} domainId The field will contain id of domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: string, options: any = {}): FetchArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling getDomain.');
            }
            const localVarPath = `/v1/domains/{domain_id}`
                .replace(`{${"domain_id"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fulfillmentId The field will contain id of fulfillment.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillment(fulfillmentId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'fulfillmentId' is not null or undefined
            if (fulfillmentId === null || fulfillmentId === undefined) {
                throw new RequiredError('fulfillmentId','Required parameter fulfillmentId was null or undefined when calling getFulfillment.');
            }
            const localVarPath = `/v1/fulfillments/{fulfillment_id}`
                .replace(`{${"fulfillment_id"}}`, encodeURIComponent(String(fulfillmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(lineItemId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling getLineItem.');
            }
            const localVarPath = `/v1/line_items/{line_item_id}`
                .replace(`{${"line_item_id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId The field will contain id of order.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, domainId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrder.');
            }
            const localVarPath = `/v1/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fqdn The Shopify domain FQDN.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantByFQDN(fqdn: string, options: any = {}): FetchArgs {
            // verify required parameter 'fqdn' is not null or undefined
            if (fqdn === null || fqdn === undefined) {
                throw new RequiredError('fqdn','Required parameter fqdn was null or undefined when calling getTenantByFQDN.');
            }
            const localVarPath = `/v1/tenants:getByFQDN/{fqdn}`
                .replace(`{${"fqdn"}}`, encodeURIComponent(String(fqdn)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(pageSize?: number, pageToken?: string, domainId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [fqdn] The fqdn adds filtering by Shopify&#39;s fqdn.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(pageSize?: number, pageToken?: string, fqdn?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (fqdn !== undefined) {
                localVarQueryParameter['fqdn'] = fqdn;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/fulfillments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItems(pageSize?: number, pageToken?: string, domainId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/line_items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v1/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (domainId !== undefined) {
                localVarQueryParameter['domain_id'] = domainId;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerId A unique identifier for the customer.
         * @param {UpdateCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(customerId: string, body: UpdateCustomerRequest, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling updateCustomer.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCustomer.');
            }
            const localVarPath = `/v1/customers/{customer.id}`
                .replace(`{${"customer.id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} domainId The domain ID.
         * @param {UpdateDomainRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: string, body: UpdateDomainRequest, options: any = {}): FetchArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling updateDomain.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateDomain.');
            }
            const localVarPath = `/v1/domains/{domain.id}`
                .replace(`{${"domain.id"}}`, encodeURIComponent(String(domainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fulfillmentId The ID for the fulfillment.
         * @param {UpdateFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillment(fulfillmentId: string, body: UpdateFulfillmentRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fulfillmentId' is not null or undefined
            if (fulfillmentId === null || fulfillmentId === undefined) {
                throw new RequiredError('fulfillmentId','Required parameter fulfillmentId was null or undefined when calling updateFulfillment.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateFulfillment.');
            }
            const localVarPath = `/v1/fulfillments/{fulfillment.id}`
                .replace(`{${"fulfillment.id"}}`, encodeURIComponent(String(fulfillmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lineItemId The ID of the line item.
         * @param {UpdateLineItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options: any = {}): FetchArgs {
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling updateLineItem.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateLineItem.');
            }
            const localVarPath = `/v1/line_items/{line_item.id}`
                .replace(`{${"line_item.id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId The Shopify ID of the order.
         * @param {UpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, body: UpdateOrderRequest, options: any = {}): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrder.');
            }
            const localVarPath = `/v1/orders/{order.id}`
                .replace(`{${"order.id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersServiceApi - functional programming interface
 * @export
 */
export const OrdersServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Customer} body The customer resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(body: Customer, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).createCustomer(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Domain} body The domain resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(body: Domain, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Domain> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).createDomain(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Fulfillment} body The fulfillment resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillment(body: Fulfillment, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Fulfillment> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).createFulfillment(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {LineItem} body The line_item resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItem(body: LineItem, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).createLineItem(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Order} body The order resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Order, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).createOrder(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} customerId The resource id of the customer to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(customerId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).deleteCustomer(customerId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} domainId The resource id of the domain to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).deleteDomain(domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fulfillmentId The resource id of the fulfillment to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFulfillment(fulfillmentId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).deleteFulfillment(fulfillmentId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} lineItemId The resource id of the line_item to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItem(lineItemId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).deleteLineItem(lineItemId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} orderId The resource id of the order to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).deleteOrder(orderId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).getCustomer(customerId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} domainId The field will contain id of domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Domain> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).getDomain(domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fulfillmentId The field will contain id of fulfillment.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillment(fulfillmentId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Fulfillment> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).getFulfillment(fulfillmentId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(lineItemId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).getLineItem(lineItemId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} orderId The field will contain id of order.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).getOrder(orderId, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fqdn The Shopify domain FQDN.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantByFQDN(fqdn: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Tenant> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).getTenantByFQDN(fqdn, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(pageSize?: number, pageToken?: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListCustomersResponse> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).listCustomers(pageSize, pageToken, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [fqdn] The fqdn adds filtering by Shopify&#39;s fqdn.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(pageSize?: number, pageToken?: string, fqdn?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListDomainsResponse> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).listDomains(pageSize, pageToken, fqdn, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListFulfillmentsResponse> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).listFulfillments(pageSize, pageToken, domainId, folderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItems(pageSize?: number, pageToken?: string, domainId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListLineItemsResponse> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).listLineItems(pageSize, pageToken, domainId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListOrdersResponse> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).listOrders(pageSize, pageToken, domainId, folderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} customerId A unique identifier for the customer.
         * @param {UpdateCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).updateCustomer(customerId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} domainId The domain ID.
         * @param {UpdateDomainRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: string, body: UpdateDomainRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Domain> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).updateDomain(domainId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fulfillmentId The ID for the fulfillment.
         * @param {UpdateFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillment(fulfillmentId: string, body: UpdateFulfillmentRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Fulfillment> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).updateFulfillment(fulfillmentId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} lineItemId The ID of the line item.
         * @param {UpdateLineItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).updateLineItem(lineItemId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} orderId The Shopify ID of the order.
         * @param {UpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, body: UpdateOrderRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersServiceApiFetchParamCreator(configuration).updateOrder(orderId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrdersServiceApi - factory interface
 * @export
 */
export const OrdersServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {Customer} body The customer resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(body: Customer, options?: any) {
            return OrdersServiceApiFp(configuration).createCustomer(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Domain} body The domain resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(body: Domain, options?: any) {
            return OrdersServiceApiFp(configuration).createDomain(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Fulfillment} body The fulfillment resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillment(body: Fulfillment, options?: any) {
            return OrdersServiceApiFp(configuration).createFulfillment(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {LineItem} body The line_item resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItem(body: LineItem, options?: any) {
            return OrdersServiceApiFp(configuration).createLineItem(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {Order} body The order resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Order, options?: any) {
            return OrdersServiceApiFp(configuration).createOrder(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} customerId The resource id of the customer to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(customerId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).deleteCustomer(customerId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} domainId The resource id of the domain to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(domainId: string, options?: any) {
            return OrdersServiceApiFp(configuration).deleteDomain(domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fulfillmentId The resource id of the fulfillment to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFulfillment(fulfillmentId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).deleteFulfillment(fulfillmentId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} lineItemId The resource id of the line_item to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLineItem(lineItemId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).deleteLineItem(lineItemId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} orderId The resource id of the order to be deleted.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).deleteOrder(orderId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).getCustomer(customerId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} domainId The field will contain id of domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(domainId: string, options?: any) {
            return OrdersServiceApiFp(configuration).getDomain(domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fulfillmentId The field will contain id of fulfillment.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillment(fulfillmentId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).getFulfillment(fulfillmentId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(lineItemId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).getLineItem(lineItemId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} orderId The field will contain id of order.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).getOrder(orderId, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fqdn The Shopify domain FQDN.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantByFQDN(fqdn: string, options?: any) {
            return OrdersServiceApiFp(configuration).getTenantByFQDN(fqdn, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(pageSize?: number, pageToken?: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).listCustomers(pageSize, pageToken, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [fqdn] The fqdn adds filtering by Shopify&#39;s fqdn.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(pageSize?: number, pageToken?: string, fqdn?: string, options?: any) {
            return OrdersServiceApiFp(configuration).listDomains(pageSize, pageToken, fqdn, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFulfillments(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).listFulfillments(pageSize, pageToken, domainId, folderId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The Shopify Domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItems(pageSize?: number, pageToken?: string, domainId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).listLineItems(pageSize, pageToken, domainId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
         * @param {string} [folderId] The folder_id adds filtering by folder.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any) {
            return OrdersServiceApiFp(configuration).listOrders(pageSize, pageToken, domainId, folderId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} customerId A unique identifier for the customer.
         * @param {UpdateCustomerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any) {
            return OrdersServiceApiFp(configuration).updateCustomer(customerId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} domainId The domain ID.
         * @param {UpdateDomainRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(domainId: string, body: UpdateDomainRequest, options?: any) {
            return OrdersServiceApiFp(configuration).updateDomain(domainId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fulfillmentId The ID for the fulfillment.
         * @param {UpdateFulfillmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillment(fulfillmentId: string, body: UpdateFulfillmentRequest, options?: any) {
            return OrdersServiceApiFp(configuration).updateFulfillment(fulfillmentId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} lineItemId The ID of the line item.
         * @param {UpdateLineItemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options?: any) {
            return OrdersServiceApiFp(configuration).updateLineItem(lineItemId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} orderId The Shopify ID of the order.
         * @param {UpdateOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(orderId: string, body: UpdateOrderRequest, options?: any) {
            return OrdersServiceApiFp(configuration).updateOrder(orderId, body, options)(fetch, basePath);
        },
    };
};

/**
 * OrdersServiceApi - object-oriented interface
 * @export
 * @class OrdersServiceApi
 * @extends {BaseAPI}
 */
export class OrdersServiceApi extends BaseAPI {
    /**
     * 
     * @param {Customer} body The customer resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public createCustomer(body: Customer, options?: any) {
        return OrdersServiceApiFp(this.configuration).createCustomer(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Domain} body The domain resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public createDomain(body: Domain, options?: any) {
        return OrdersServiceApiFp(this.configuration).createDomain(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Fulfillment} body The fulfillment resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public createFulfillment(body: Fulfillment, options?: any) {
        return OrdersServiceApiFp(this.configuration).createFulfillment(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {LineItem} body The line_item resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public createLineItem(body: LineItem, options?: any) {
        return OrdersServiceApiFp(this.configuration).createLineItem(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Order} body The order resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public createOrder(body: Order, options?: any) {
        return OrdersServiceApiFp(this.configuration).createOrder(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} customerId The resource id of the customer to be deleted.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public deleteCustomer(customerId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).deleteCustomer(customerId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} domainId The resource id of the domain to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public deleteDomain(domainId: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).deleteDomain(domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fulfillmentId The resource id of the fulfillment to be deleted.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public deleteFulfillment(fulfillmentId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).deleteFulfillment(fulfillmentId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} lineItemId The resource id of the line_item to be deleted.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public deleteLineItem(lineItemId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).deleteLineItem(lineItemId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} orderId The resource id of the order to be deleted.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public deleteOrder(orderId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).deleteOrder(orderId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} customerId The field will contain id of the resource requested.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public getCustomer(customerId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).getCustomer(customerId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} domainId The field will contain id of domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public getDomain(domainId: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).getDomain(domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fulfillmentId The field will contain id of fulfillment.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public getFulfillment(fulfillmentId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).getFulfillment(fulfillmentId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} lineItemId The field will contain id of the resource requested.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public getLineItem(lineItemId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).getLineItem(lineItemId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} orderId The field will contain id of order.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public getOrder(orderId: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).getOrder(orderId, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fqdn The Shopify domain FQDN.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public getTenantByFQDN(fqdn: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).getTenantByFQDN(fqdn, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public listCustomers(pageSize?: number, pageToken?: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).listCustomers(pageSize, pageToken, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [fqdn] The fqdn adds filtering by Shopify&#39;s fqdn.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public listDomains(pageSize?: number, pageToken?: string, fqdn?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).listDomains(pageSize, pageToken, fqdn, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
     * @param {string} [folderId] The folder_id adds filtering by folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public listFulfillments(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).listFulfillments(pageSize, pageToken, domainId, folderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [domainId] The Shopify Domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public listLineItems(pageSize?: number, pageToken?: string, domainId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).listLineItems(pageSize, pageToken, domainId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [domainId] The domain_id adds filtering by Shopify&#39;s domain.
     * @param {string} [folderId] The folder_id adds filtering by folder.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public listOrders(pageSize?: number, pageToken?: string, domainId?: string, folderId?: string, options?: any) {
        return OrdersServiceApiFp(this.configuration).listOrders(pageSize, pageToken, domainId, folderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} customerId A unique identifier for the customer.
     * @param {UpdateCustomerRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public updateCustomer(customerId: string, body: UpdateCustomerRequest, options?: any) {
        return OrdersServiceApiFp(this.configuration).updateCustomer(customerId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} domainId The domain ID.
     * @param {UpdateDomainRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public updateDomain(domainId: string, body: UpdateDomainRequest, options?: any) {
        return OrdersServiceApiFp(this.configuration).updateDomain(domainId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fulfillmentId The ID for the fulfillment.
     * @param {UpdateFulfillmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public updateFulfillment(fulfillmentId: string, body: UpdateFulfillmentRequest, options?: any) {
        return OrdersServiceApiFp(this.configuration).updateFulfillment(fulfillmentId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} lineItemId The ID of the line item.
     * @param {UpdateLineItemRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public updateLineItem(lineItemId: string, body: UpdateLineItemRequest, options?: any) {
        return OrdersServiceApiFp(this.configuration).updateLineItem(lineItemId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} orderId The Shopify ID of the order.
     * @param {UpdateOrderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersServiceApi
     */
    public updateOrder(orderId: string, body: UpdateOrderRequest, options?: any) {
        return OrdersServiceApiFp(this.configuration).updateOrder(orderId, body, options)(this.fetch, this.basePath);
    }

}

