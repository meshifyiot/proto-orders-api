/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OrdersAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0
 * Contact: dev@meshify.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The Shopify Store to which address record belongs to.
     * @type {string}
     * @memberof Address
     */
    shopId?: string;
    /**
     * The full name of the person associated with the payment method.
     * @type {string}
     * @memberof Address
     */
    name?: string;
    /**
     * The phone number at the shipping address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
    /**
     * The company of the person associated with the shipping address.
     * @type {string}
     * @memberof Address
     */
    company?: string;
    /**
     * The first name of the person associated with the shipping address.
     * @type {string}
     * @memberof Address
     */
    firstName?: string;
    /**
     * The last name of the person associated with the shipping address.
     * @type {string}
     * @memberof Address
     */
    lastName?: string;
    /**
     * The street address of the shipping address.
     * @type {string}
     * @memberof Address
     */
    address1?: string;
    /**
     * An optional additional field for the street address of the  shipping address.
     * @type {string}
     * @memberof Address
     */
    address2?: string;
    /**
     * The city, town, or village of the shipping address.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The two-letter abbreviation of the region of the shipping address.
     * @type {string}
     * @memberof Address
     */
    provinceCode?: string;
    /**
     * The name of the region (province, state, prefecture, …) of the  shipping address.
     * @type {string}
     * @memberof Address
     */
    province?: string;
    /**
     * The postal code (zip, postcode, Eircode, …) of the shipping address.
     * @type {string}
     * @memberof Address
     */
    zip?: string;
    /**
     * The two-letter code (ISO 3166-1 format) for the country of the  shipping address.
     * @type {string}
     * @memberof Address
     */
    countryCode?: string;
    /**
     * The name of the country of the shipping address.
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * The latitude of the shipping address.
     * @type {number}
     * @memberof Address
     */
    latitude?: number;
    /**
     * The longitude of the shipping address.
     * @type {number}
     * @memberof Address
     */
    longitude?: number;
}

/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * The Shopify Store to which customer record belongs to.
     * @type {string}
     * @memberof Customer
     */
    shopId?: string;
    /**
     * A unique identifier for the customer.
     * @type {string}
     * @memberof Customer
     */
    id?: string;
    /**
     * The date and time when the customer was created.
     * @type {Date}
     * @memberof Customer
     */
    createdAt?: Date;
    /**
     * The date and time when the customer information was last updated.
     * @type {Date}
     * @memberof Customer
     */
    updatedAt?: Date;
    /**
     * The unique email address of the customer.
     * @type {string}
     * @memberof Customer
     */
    email?: string;
    /**
     * The customer's first name.
     * @type {string}
     * @memberof Customer
     */
    firstName?: string;
    /**
     * The customer's last name.
     * @type {string}
     * @memberof Customer
     */
    lastName?: string;
    /**
     * The state of the customer's account with a shop. Default value: disabled. Valid values: disabled: The customer doesn't have an active account.    Customer accounts can be disabled from the Shopify admin at any time. invited: The customer has received an email invite to create an account. enabled: The customer has created an account. declined: The customer declined the email invite to create an account.
     * @type {string}
     * @memberof Customer
     */
    state?: string;
    /**
     * A note about the customer.
     * @type {string}
     * @memberof Customer
     */
    note?: string;
    /**
     * The unique phone number (E.164 format) for this customer.
     * @type {string}
     * @memberof Customer
     */
    phone?: string;
    /**
     * The default address for the customer.
     * @type {Address}
     * @memberof Customer
     */
    defaultAddress?: Address;
}

/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * The device ID.
     * @type {string}
     * @memberof Device
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface DeviceAction
 */
export interface DeviceAction {
    /**
     * The Device to which action belongs to.
     * @type {string}
     * @memberof DeviceAction
     */
    deviceId?: string;
    /**
     * The ID of the device action.
     * @type {string}
     * @memberof DeviceAction
     */
    id?: string;
    /**
     * 
     * @type {DeviceActionKind}
     * @memberof DeviceAction
     */
    kind?: DeviceActionKind;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DeviceAction
     */
    parameters?: { [key: string]: string; };
    /**
     * 
     * @type {DeviceActionStatus}
     * @memberof DeviceAction
     */
    status?: DeviceActionStatus;
    /**
     * 
     * @type {string}
     * @memberof DeviceAction
     */
    details?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum DeviceActionKind {
    DUMMY = 'DUMMY'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum DeviceActionStatus {
    CREATED = 'CREATED',
    INPROGRESS = 'IN_PROGRESS',
    DONE = 'DONE',
    ERROR = 'ERROR'
}

/**
 * 
 * @export
 * @interface Fulfillment
 */
export interface Fulfillment {
    /**
     * The Shopify Store to which fulfillment record belongs to.
     * @type {string}
     * @memberof Fulfillment
     */
    shopId?: string;
    /**
     * The ID for the fulfillment.
     * @type {string}
     * @memberof Fulfillment
     */
    id?: string;
    /**
     * The unique numeric identifier for the order.
     * @type {string}
     * @memberof Fulfillment
     */
    orderId?: string;
    /**
     * The date and time when the fulfillment was created.
     * @type {Date}
     * @memberof Fulfillment
     */
    createdAt?: Date;
    /**
     * The date and time when the fulfillment was updated.
     * @type {Date}
     * @memberof Fulfillment
     */
    updatedAt?: Date;
    /**
     * The status of the fulfillment. Valid values: pending: The fulfillment is pending. open: The fulfillment has been acknowledged by the service and is   in processing. success: The fulfillment was successful. cancelled: The fulfillment was cancelled. error: There was an error with the fulfillment request. failure: The fulfillment request failed.
     * @type {string}
     * @memberof Fulfillment
     */
    status?: string;
    /**
     * The name of the tracking company.
     * @type {string}
     * @memberof Fulfillment
     */
    trackingCompany?: string;
    /**
     * A list of tracking numbers, provided by the shipping company.
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    trackingNumbers?: Array<string>;
    /**
     * The URLs of tracking pages for the fulfillment.
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    trackingUrls?: Array<string>;
    /**
     * A historical record of each item in the fulfillment.
     * @type {Array<string>}
     * @memberof Fulfillment
     */
    lineItemIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     * The Shopify Store to which line_item record belongs to.
     * @type {string}
     * @memberof LineItem
     */
    shopId?: string;
    /**
     * The ID of the line item.
     * @type {string}
     * @memberof LineItem
     */
    id?: string;
    /**
     * The number of items that were purchased.
     * @type {string}
     * @memberof LineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    fulfillableQuantity?: string;
    /**
     * Whether the item requires shipping.
     * @type {boolean}
     * @memberof LineItem
     */
    requiresShipping?: boolean;
    /**
     * The name of the product variant.
     * @type {string}
     * @memberof LineItem
     */
    name?: string;
    /**
     * The title of the product.
     * @type {string}
     * @memberof LineItem
     */
    title?: string;
    /**
     * The item's SKU (stock keeping unit).
     * @type {string}
     * @memberof LineItem
     */
    sku?: string;
    /**
     * The service provider that's fulfilling the item. Valid values:  manual, or the name of the provider, such as amazon or shipwire.
     * @type {string}
     * @memberof LineItem
     */
    fulfillmentService?: string;
}

/**
 * 
 * @export
 * @interface ListCustomersResponse
 */
export interface ListCustomersResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Customer>}
     * @memberof ListCustomersResponse
     */
    customers?: Array<Customer>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListCustomersResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListDeviceActionsResponse
 */
export interface ListDeviceActionsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<DeviceAction>}
     * @memberof ListDeviceActionsResponse
     */
    actions?: Array<DeviceAction>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListDeviceActionsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListDevicesResponse
 */
export interface ListDevicesResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Device>}
     * @memberof ListDevicesResponse
     */
    devices?: Array<Device>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListDevicesResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListFulfillmentsResponse
 */
export interface ListFulfillmentsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Fulfillment>}
     * @memberof ListFulfillmentsResponse
     */
    fulfillments?: Array<Fulfillment>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListFulfillmentsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListLineItemsResponse
 */
export interface ListLineItemsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<LineItem>}
     * @memberof ListLineItemsResponse
     */
    lineItems?: Array<LineItem>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListLineItemsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListOrdersResponse
 */
export interface ListOrdersResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Order>}
     * @memberof ListOrdersResponse
     */
    orders?: Array<Order>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListOrdersResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface ListShopsResponse
 */
export interface ListShopsResponse {
    /**
     * There will be a maximum number of items returned based on the page_size field in the request.
     * @type {Array<Shop>}
     * @memberof ListShopsResponse
     */
    shops?: Array<Shop>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListShopsResponse
     */
    nextPageToken?: string;
}

/**
 * 
 * @export
 * @interface NoteAttribute
 */
export interface NoteAttribute {
    /**
     * 
     * @type {string}
     * @memberof NoteAttribute
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof NoteAttribute
     */
    value?: string;
}

/**
 * An order is a customer's completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provide an email address or phone number, billing address and payment information.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The Shopify Store to which order belongs to.
     * @type {string}
     * @memberof Order
     */
    shopId?: string;
    /**
     * The Shopify ID of the order.
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * Customer facing order ID, used by the shop owner and customer.
     * @type {string}
     * @memberof Order
     */
    orderNumber?: string;
    /**
     * The customer's email address.
     * @type {string}
     * @memberof Order
     */
    email?: string;
    /**
     * The order's position in the shop's count of orders.  Numbers are sequential and start at 1.
     * @type {string}
     * @memberof Order
     */
    number?: string;
    /**
     * An optional note that a shop owner can attach to the order.
     * @type {string}
     * @memberof Order
     */
    note?: string;
    /**
     * A unique token for the order.
     * @type {string}
     * @memberof Order
     */
    token?: string;
    /**
     * The autogenerated date and time when the order was created in Shopify.  The value for this property cannot be changed.
     * @type {Date}
     * @memberof Order
     */
    createdAt?: Date;
    /**
     * The date and time when an order was processed.  This value is the date that appears on your orders and that's used in  the analytic reports. By default, it matches the created_at value.
     * @type {Date}
     * @memberof Order
     */
    processedAt?: Date;
    /**
     * The date and time when the order was last modified. Its value can change when no visible fields of an order have been updated.
     * @type {Date}
     * @memberof Order
     */
    updatedAt?: Date;
    /**
     * The date and time when the order was closed.
     * @type {Date}
     * @memberof Order
     */
    closedAt?: Date;
    /**
     * The date and time when the order was canceled.
     * @type {Date}
     * @memberof Order
     */
    cancelledAt?: Date;
    /**
     * The order name, generated by combining the order_number property with the order prefix and suffix that are set in the merchant's general settings. This is different from the id property, which is the ID of the order used by the Shopify API. This field can also be set by the Shopify API  to be any string value.
     * @type {string}
     * @memberof Order
     */
    name?: string;
    /**
     * The reason why the order was canceled. Valid values: customer: The customer canceled the order. fraud: The order was fraudulent. inventory: Items in the order were not in inventory. declined: The payment was declined. other: A reason not in this list.
     * @type {string}
     * @memberof Order
     */
    cancelReason?: string;
    /**
     * The ID of the Shopify app that created the order.
     * @type {string}
     * @memberof Order
     */
    appId?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    contactEmail?: string;
    /**
     * The mailing address to where the order will be shipped.  This address is optional and will not be available on orders that  do not require shipping.
     * @type {Address}
     * @memberof Order
     */
    shippingAddress?: Address;
    /**
     * A list of line item objects, each containing information about an item in the order.
     * @type {Array<string>}
     * @memberof Order
     */
    lineItemIds?: Array<string>;
    /**
     * Information about the customer. The order might not have a customer  and apps should not depend on the existence of a customer object.  This value might be null if the order was created through Shopify POS.
     * @type {string}
     * @memberof Order
     */
    customerId?: string;
    /**
     * ID of folder that order belongs to.
     * @type {number}
     * @memberof Order
     */
    folderId?: number;
    /**
     * Whether this is a test order.
     * @type {boolean}
     * @memberof Order
     */
    test?: boolean;
    /**
     * The sum of all line item prices, discounts, shipping, taxes, and tips  in the shop currency (in cents). Must be positive.
     * @type {string}
     * @memberof Order
     */
    totalPrice?: string;
    /**
     * The price of the order in the shop currency (in cents) after discounts  but before shipping, taxes, and tips.
     * @type {string}
     * @memberof Order
     */
    subtotalPrice?: string;
    /**
     * The sum of all line item weights in grams.
     * @type {string}
     * @memberof Order
     */
    totalWeight?: string;
    /**
     * The sum of all the taxes applied to the order in th shop currency  (in cents). Must be positive.
     * @type {string}
     * @memberof Order
     */
    totalTax?: string;
    /**
     * Whether taxes are included in the order subtotal.
     * @type {boolean}
     * @memberof Order
     */
    taxesIncluded?: boolean;
    /**
     * The three-letter code (ISO 4217 format) for the shop currency.
     * @type {string}
     * @memberof Order
     */
    currency?: string;
    /**
     * The status of payments associated with the order.  Can only be set when the order is created. Valid values: pending: The payments are pending. Payment might fail in this state.   Check again to confirm whether the payments have been paid successfully. authorized: The payments have been authorized. partially_paid: The order have been partially paid. paid: The payments have been paid. partially_refunded: The payments have been partially refunded. refunded: The payments have been refunded. voided: The payments have been voided.
     * @type {string}
     * @memberof Order
     */
    financialStatus?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    confirmed?: boolean;
    /**
     * The sum of all line item prices, discounts, shipping, taxes, and tips  in the in USD cents. Must be positive.
     * @type {string}
     * @memberof Order
     */
    totalPriceUsd?: string;
    /**
     * Extra information that is added to the order. Appears in the Additional details section of an order details page. Each array entry must contain a hash with name and value keys.
     * @type {Array<NoteAttribute>}
     * @memberof Order
     */
    noteAttributes?: Array<NoteAttribute>;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    typeUrl?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}

/**
 * paths: \"f.a\"     paths: \"f.b.d\"  Here `f` represents a field in some root message, `a` and `b` fields in the message found in `f`, and `d` a field found in the message in `f.b`.  Field masks are used to specify a subset of fields that should be returned by a get operation or modified by an update operation. Field masks also have a custom JSON encoding (see below).  # Field Masks in Projections  When used in the context of a projection, a response message or sub-message is filtered by the API to only contain those fields as specified in the mask. For example, if the mask in the previous example is applied to a response message as follows:      f {       a : 22       b {         d : 1         x : 2       }       y : 13     }     z: 8  The result will not contain specific values for fields x,y and z (their value will be set to the default, and omitted in proto text output):       f {       a : 22       b {         d : 1       }     }  A repeated field is not allowed except at the last position of a paths string.  If a FieldMask object is not present in a get operation, the operation applies to all fields (as if a FieldMask of all fields had been specified).  Note that a field mask does not necessarily apply to the top-level response message. In case of a REST get operation, the field mask applies directly to the response, but in case of a REST list operation, the mask instead applies to each individual message in the returned resource list. In case of a REST custom method, other definitions may be used. Where the mask applies will be clearly documented together with its declaration in the API.  In any case, the effect on the returned resource/resources is required behavior for APIs.  # Field Masks in Update Operations  A field mask in update operations specifies which fields of the targeted resource are going to be updated. The API is required to only change the values of the fields as specified in the mask and leave the others untouched. If a resource is passed in to describe the updated values, the API ignores the values of all fields not covered by the mask.  If a repeated field is specified for an update operation, new values will be appended to the existing repeated field in the target resource. Note that a repeated field is only allowed in the last position of a `paths` string.  If a sub-message is specified in the last position of the field mask for an update operation, then new value will be merged into the existing sub-message in the target resource.  For example, given the target message:      f {       b {         d: 1         x: 2       }       c: [1]     }  And an update message:      f {       b {         d: 10       }       c: [2]     }  then if the field mask is:   paths: [\"f.b\", \"f.c\"]  then the result will be:      f {       b {         d: 10         x: 2       }       c: [1, 2]     }  An implementation may provide options to override this default behavior for repeated and message fields.  In order to reset a field's value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below.  If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not.  As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API.  ## Considerations for HTTP REST  The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates).  # JSON Encoding of Field Masks  In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions.  As an example, consider the following message declarations:      message Profile {       User user = 1;       Photo photo = 2;     }     message User {       string display_name = 1;       string address = 2;     }  In proto a field mask for `Profile` may look as such:      mask {       paths: \"user.display_name\"       paths: \"photo\"     }  In JSON, the same mask is represented as below:      {       mask: \"user.displayName,photo\"     }  # Field Masks and Oneof Fields  Field masks treat fields in oneofs just as regular fields. Consider the following message:      message SampleMessage {       oneof test_oneof {         string name = 4;         SubMessage sub_message = 9;       }     }  The field mask can be:      mask {       paths: \"name\"     }  Or:      mask {       paths: \"sub_message\"     }  Note that oneof type names (\"test_oneof\" in this case) cannot be used in paths.  ## Field Mask Verification  The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is unmappable.
 * @export
 * @interface ProtobufFieldMask
 */
export interface ProtobufFieldMask {
    /**
     * The set of field mask paths.
     * @type {Array<string>}
     * @memberof ProtobufFieldMask
     */
    paths?: Array<string>;
}

/**
 * 
 * @export
 * @interface RuntimeError
 */
export interface RuntimeError {
    /**
     * 
     * @type {string}
     * @memberof RuntimeError
     */
    error?: string;
    /**
     * 
     * @type {number}
     * @memberof RuntimeError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof RuntimeError
     */
    message?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RuntimeError
     */
    details?: Array<ProtobufAny>;
}

/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * The shop ID.
     * @type {string}
     * @memberof Shop
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * The TenantID.
     * @type {string}
     * @memberof Tenant
     */
    id?: string;
    /**
     * The name of tenant.
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface UpdateDeviceRequest
 */
export interface UpdateDeviceRequest {
    /**
     * The device resource which replaces the resource on the server.
     * @type {Device}
     * @memberof UpdateDeviceRequest
     */
    device?: Device;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateDeviceRequest
     */
    updateMask?: ProtobufFieldMask;
}

/**
 * 
 * @export
 * @interface UpdateShopRequest
 */
export interface UpdateShopRequest {
    /**
     * The shop resource which replaces the resource on the server.
     * @type {Shop}
     * @memberof UpdateShopRequest
     */
    shop?: Shop;
    /**
     * 
     * @type {ProtobufFieldMask}
     * @memberof UpdateShopRequest
     */
    updateMask?: ProtobufFieldMask;
}


/**
 * CustomersApi - fetch parameter creator
 * @export
 */
export const CustomersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetCustomer(shopId: string, customerId: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceGetCustomer.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling ordersServiceGetCustomer.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/customers/{customer_id}`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListCustomers(shopId: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceListCustomers.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/customers`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetCustomer(shopId: string, customerId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Customer> {
            const localVarFetchArgs = CustomersApiFetchParamCreator(configuration).ordersServiceGetCustomer(shopId, customerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListCustomers(shopId: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListCustomersResponse> {
            const localVarFetchArgs = CustomersApiFetchParamCreator(configuration).ordersServiceListCustomers(shopId, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {string} customerId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetCustomer(shopId: string, customerId: string, options?: any) {
            return CustomersApiFp(configuration).ordersServiceGetCustomer(shopId, customerId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListCustomers(shopId: string, pageSize?: number, pageToken?: string, options?: any) {
            return CustomersApiFp(configuration).ordersServiceListCustomers(shopId, pageSize, pageToken, options)(fetch, basePath);
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
    /**
     * 
     * @param {string} shopId The Shopify Store.
     * @param {string} customerId The field will contain id of the resource requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public ordersServiceGetCustomer(shopId: string, customerId: string, options?: any) {
        return CustomersApiFp(this.configuration).ordersServiceGetCustomer(shopId, customerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} shopId The Shopify Store.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public ordersServiceListCustomers(shopId: string, pageSize?: number, pageToken?: string, options?: any) {
        return CustomersApiFp(this.configuration).ordersServiceListCustomers(shopId, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

}

/**
 * DeviceActionsApi - fetch parameter creator
 * @export
 */
export const DeviceActionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateDeviceAction creates a device action.
         * @param {string} deviceId The Device ID.
         * @param {DeviceAction} body The device_action resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateDeviceAction(deviceId: string, body: DeviceAction, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling ordersServiceCreateDeviceAction.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersServiceCreateDeviceAction.');
            }
            const localVarPath = `/api/ordersapi/v1/devices/{device_id}/actions`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetDeviceAction returns a device action.
         * @param {string} deviceId The Device ID.
         * @param {string} actionId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetDeviceAction(deviceId: string, actionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling ordersServiceGetDeviceAction.');
            }
            // verify required parameter 'actionId' is not null or undefined
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId','Required parameter actionId was null or undefined when calling ordersServiceGetDeviceAction.');
            }
            const localVarPath = `/api/ordersapi/v1/devices/{device_id}/actions/{action_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"action_id"}}`, encodeURIComponent(String(actionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListDeviceActions returns paginated list of device actions.
         * @param {string} deviceId The Device ID.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListDeviceActions(deviceId: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling ordersServiceListDeviceActions.');
            }
            const localVarPath = `/api/ordersapi/v1/devices/{device_id}/actions`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceActionsApi - functional programming interface
 * @export
 */
export const DeviceActionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateDeviceAction creates a device action.
         * @param {string} deviceId The Device ID.
         * @param {DeviceAction} body The device_action resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateDeviceAction(deviceId: string, body: DeviceAction, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeviceAction> {
            const localVarFetchArgs = DeviceActionsApiFetchParamCreator(configuration).ordersServiceCreateDeviceAction(deviceId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GetDeviceAction returns a device action.
         * @param {string} deviceId The Device ID.
         * @param {string} actionId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetDeviceAction(deviceId: string, actionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeviceAction> {
            const localVarFetchArgs = DeviceActionsApiFetchParamCreator(configuration).ordersServiceGetDeviceAction(deviceId, actionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ListDeviceActions returns paginated list of device actions.
         * @param {string} deviceId The Device ID.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListDeviceActions(deviceId: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListDeviceActionsResponse> {
            const localVarFetchArgs = DeviceActionsApiFetchParamCreator(configuration).ordersServiceListDeviceActions(deviceId, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DeviceActionsApi - factory interface
 * @export
 */
export const DeviceActionsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary CreateDeviceAction creates a device action.
         * @param {string} deviceId The Device ID.
         * @param {DeviceAction} body The device_action resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateDeviceAction(deviceId: string, body: DeviceAction, options?: any) {
            return DeviceActionsApiFp(configuration).ordersServiceCreateDeviceAction(deviceId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GetDeviceAction returns a device action.
         * @param {string} deviceId The Device ID.
         * @param {string} actionId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetDeviceAction(deviceId: string, actionId: string, options?: any) {
            return DeviceActionsApiFp(configuration).ordersServiceGetDeviceAction(deviceId, actionId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ListDeviceActions returns paginated list of device actions.
         * @param {string} deviceId The Device ID.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListDeviceActions(deviceId: string, pageSize?: number, pageToken?: string, options?: any) {
            return DeviceActionsApiFp(configuration).ordersServiceListDeviceActions(deviceId, pageSize, pageToken, options)(fetch, basePath);
        },
    };
};

/**
 * DeviceActionsApi - object-oriented interface
 * @export
 * @class DeviceActionsApi
 * @extends {BaseAPI}
 */
export class DeviceActionsApi extends BaseAPI {
    /**
     * 
     * @summary CreateDeviceAction creates a device action.
     * @param {string} deviceId The Device ID.
     * @param {DeviceAction} body The device_action resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceActionsApi
     */
    public ordersServiceCreateDeviceAction(deviceId: string, body: DeviceAction, options?: any) {
        return DeviceActionsApiFp(this.configuration).ordersServiceCreateDeviceAction(deviceId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GetDeviceAction returns a device action.
     * @param {string} deviceId The Device ID.
     * @param {string} actionId The field will contain id of the resource requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceActionsApi
     */
    public ordersServiceGetDeviceAction(deviceId: string, actionId: string, options?: any) {
        return DeviceActionsApiFp(this.configuration).ordersServiceGetDeviceAction(deviceId, actionId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ListDeviceActions returns paginated list of device actions.
     * @param {string} deviceId The Device ID.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceActionsApi
     */
    public ordersServiceListDeviceActions(deviceId: string, pageSize?: number, pageToken?: string, options?: any) {
        return DeviceActionsApiFp(this.configuration).ordersServiceListDeviceActions(deviceId, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

}

/**
 * DevicesApi - fetch parameter creator
 * @export
 */
export const DevicesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateDevice creates a device.
         * @param {Device} body The device resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateDevice(body: Device, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersServiceCreateDevice.');
            }
            const localVarPath = `/api/ordersapi/v1/devices`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteDevice deletes a device.
         * @param {string} deviceId The resource id of the device to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceDeleteDevice(deviceId: string, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling ordersServiceDeleteDevice.');
            }
            const localVarPath = `/api/ordersapi/v1/devices/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetDevice returns a device.
         * @param {string} deviceId The field will contain id of device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetDevice(deviceId: string, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling ordersServiceGetDevice.');
            }
            const localVarPath = `/api/ordersapi/v1/devices/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListDevices returns paginated list of devices.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListDevices(pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/ordersapi/v1/devices`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateDevice updates a device.
         * @param {string} deviceId The device ID.
         * @param {UpdateDeviceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceUpdateDevice(deviceId: string, body: UpdateDeviceRequest, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling ordersServiceUpdateDevice.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersServiceUpdateDevice.');
            }
            const localVarPath = `/api/ordersapi/v1/devices/{device.id}`
                .replace(`{${"device.id"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateDevice creates a device.
         * @param {Device} body The device resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateDevice(body: Device, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Device> {
            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).ordersServiceCreateDevice(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary DeleteDevice deletes a device.
         * @param {string} deviceId The resource id of the device to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceDeleteDevice(deviceId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).ordersServiceDeleteDevice(deviceId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GetDevice returns a device.
         * @param {string} deviceId The field will contain id of device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetDevice(deviceId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Device> {
            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).ordersServiceGetDevice(deviceId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ListDevices returns paginated list of devices.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListDevices(pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListDevicesResponse> {
            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).ordersServiceListDevices(pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary UpdateDevice updates a device.
         * @param {string} deviceId The device ID.
         * @param {UpdateDeviceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceUpdateDevice(deviceId: string, body: UpdateDeviceRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Device> {
            const localVarFetchArgs = DevicesApiFetchParamCreator(configuration).ordersServiceUpdateDevice(deviceId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary CreateDevice creates a device.
         * @param {Device} body The device resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateDevice(body: Device, options?: any) {
            return DevicesApiFp(configuration).ordersServiceCreateDevice(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary DeleteDevice deletes a device.
         * @param {string} deviceId The resource id of the device to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceDeleteDevice(deviceId: string, options?: any) {
            return DevicesApiFp(configuration).ordersServiceDeleteDevice(deviceId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GetDevice returns a device.
         * @param {string} deviceId The field will contain id of device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetDevice(deviceId: string, options?: any) {
            return DevicesApiFp(configuration).ordersServiceGetDevice(deviceId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ListDevices returns paginated list of devices.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListDevices(pageSize?: number, pageToken?: string, options?: any) {
            return DevicesApiFp(configuration).ordersServiceListDevices(pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary UpdateDevice updates a device.
         * @param {string} deviceId The device ID.
         * @param {UpdateDeviceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceUpdateDevice(deviceId: string, body: UpdateDeviceRequest, options?: any) {
            return DevicesApiFp(configuration).ordersServiceUpdateDevice(deviceId, body, options)(fetch, basePath);
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @summary CreateDevice creates a device.
     * @param {Device} body The device resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public ordersServiceCreateDevice(body: Device, options?: any) {
        return DevicesApiFp(this.configuration).ordersServiceCreateDevice(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary DeleteDevice deletes a device.
     * @param {string} deviceId The resource id of the device to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public ordersServiceDeleteDevice(deviceId: string, options?: any) {
        return DevicesApiFp(this.configuration).ordersServiceDeleteDevice(deviceId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GetDevice returns a device.
     * @param {string} deviceId The field will contain id of device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public ordersServiceGetDevice(deviceId: string, options?: any) {
        return DevicesApiFp(this.configuration).ordersServiceGetDevice(deviceId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ListDevices returns paginated list of devices.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public ordersServiceListDevices(pageSize?: number, pageToken?: string, options?: any) {
        return DevicesApiFp(this.configuration).ordersServiceListDevices(pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary UpdateDevice updates a device.
     * @param {string} deviceId The device ID.
     * @param {UpdateDeviceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public ordersServiceUpdateDevice(deviceId: string, body: UpdateDeviceRequest, options?: any) {
        return DevicesApiFp(this.configuration).ordersServiceUpdateDevice(deviceId, body, options)(this.fetch, this.basePath);
    }

}

/**
 * FulfillmentsApi - fetch parameter creator
 * @export
 */
export const FulfillmentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetFulfillment returns a fulfillment.
         * @param {string} shopId The Shopify Store.
         * @param {string} fulfillmentId The field will contain id of fulfillment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetFulfillment(shopId: string, fulfillmentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceGetFulfillment.');
            }
            // verify required parameter 'fulfillmentId' is not null or undefined
            if (fulfillmentId === null || fulfillmentId === undefined) {
                throw new RequiredError('fulfillmentId','Required parameter fulfillmentId was null or undefined when calling ordersServiceGetFulfillment.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/fulfillments/{fulfillment_id}`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)))
                .replace(`{${"fulfillment_id"}}`, encodeURIComponent(String(fulfillmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListFulfillments returns paginated list of fulfillments.
         * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListFulfillments(shopId: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceListFulfillments.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/fulfillments`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FulfillmentsApi - functional programming interface
 * @export
 */
export const FulfillmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetFulfillment returns a fulfillment.
         * @param {string} shopId The Shopify Store.
         * @param {string} fulfillmentId The field will contain id of fulfillment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetFulfillment(shopId: string, fulfillmentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Fulfillment> {
            const localVarFetchArgs = FulfillmentsApiFetchParamCreator(configuration).ordersServiceGetFulfillment(shopId, fulfillmentId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ListFulfillments returns paginated list of fulfillments.
         * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListFulfillments(shopId: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListFulfillmentsResponse> {
            const localVarFetchArgs = FulfillmentsApiFetchParamCreator(configuration).ordersServiceListFulfillments(shopId, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FulfillmentsApi - factory interface
 * @export
 */
export const FulfillmentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary GetFulfillment returns a fulfillment.
         * @param {string} shopId The Shopify Store.
         * @param {string} fulfillmentId The field will contain id of fulfillment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetFulfillment(shopId: string, fulfillmentId: string, options?: any) {
            return FulfillmentsApiFp(configuration).ordersServiceGetFulfillment(shopId, fulfillmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ListFulfillments returns paginated list of fulfillments.
         * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListFulfillments(shopId: string, pageSize?: number, pageToken?: string, options?: any) {
            return FulfillmentsApiFp(configuration).ordersServiceListFulfillments(shopId, pageSize, pageToken, options)(fetch, basePath);
        },
    };
};

/**
 * FulfillmentsApi - object-oriented interface
 * @export
 * @class FulfillmentsApi
 * @extends {BaseAPI}
 */
export class FulfillmentsApi extends BaseAPI {
    /**
     * 
     * @summary GetFulfillment returns a fulfillment.
     * @param {string} shopId The Shopify Store.
     * @param {string} fulfillmentId The field will contain id of fulfillment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentsApi
     */
    public ordersServiceGetFulfillment(shopId: string, fulfillmentId: string, options?: any) {
        return FulfillmentsApiFp(this.configuration).ordersServiceGetFulfillment(shopId, fulfillmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ListFulfillments returns paginated list of fulfillments.
     * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentsApi
     */
    public ordersServiceListFulfillments(shopId: string, pageSize?: number, pageToken?: string, options?: any) {
        return FulfillmentsApiFp(this.configuration).ordersServiceListFulfillments(shopId, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

}

/**
 * LineItemsApi - fetch parameter creator
 * @export
 */
export const LineItemsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetLineItem(shopId: string, lineItemId: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceGetLineItem.');
            }
            // verify required parameter 'lineItemId' is not null or undefined
            if (lineItemId === null || lineItemId === undefined) {
                throw new RequiredError('lineItemId','Required parameter lineItemId was null or undefined when calling ordersServiceGetLineItem.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/lineitems/{line_item_id}`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)))
                .replace(`{${"line_item_id"}}`, encodeURIComponent(String(lineItemId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListLineItems(shopId: string, pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceListLineItems.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/lineitems`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LineItemsApi - functional programming interface
 * @export
 */
export const LineItemsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetLineItem(shopId: string, lineItemId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LineItem> {
            const localVarFetchArgs = LineItemsApiFetchParamCreator(configuration).ordersServiceGetLineItem(shopId, lineItemId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListLineItems(shopId: string, pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListLineItemsResponse> {
            const localVarFetchArgs = LineItemsApiFetchParamCreator(configuration).ordersServiceListLineItems(shopId, pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LineItemsApi - factory interface
 * @export
 */
export const LineItemsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {string} lineItemId The field will contain id of the resource requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetLineItem(shopId: string, lineItemId: string, options?: any) {
            return LineItemsApiFp(configuration).ordersServiceGetLineItem(shopId, lineItemId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} shopId The Shopify Store.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListLineItems(shopId: string, pageSize?: number, pageToken?: string, options?: any) {
            return LineItemsApiFp(configuration).ordersServiceListLineItems(shopId, pageSize, pageToken, options)(fetch, basePath);
        },
    };
};

/**
 * LineItemsApi - object-oriented interface
 * @export
 * @class LineItemsApi
 * @extends {BaseAPI}
 */
export class LineItemsApi extends BaseAPI {
    /**
     * 
     * @param {string} shopId The Shopify Store.
     * @param {string} lineItemId The field will contain id of the resource requested.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemsApi
     */
    public ordersServiceGetLineItem(shopId: string, lineItemId: string, options?: any) {
        return LineItemsApiFp(this.configuration).ordersServiceGetLineItem(shopId, lineItemId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} shopId The Shopify Store.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemsApi
     */
    public ordersServiceListLineItems(shopId: string, pageSize?: number, pageToken?: string, options?: any) {
        return LineItemsApiFp(this.configuration).ordersServiceListLineItems(shopId, pageSize, pageToken, options)(this.fetch, this.basePath);
    }

}

/**
 * OrdersApi - fetch parameter creator
 * @export
 */
export const OrdersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetOrder returns an order.
         * @param {string} shopId The Shopify Store.
         * @param {string} orderId The field will contain id of order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetOrder(shopId: string, orderId: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceGetOrder.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling ordersServiceGetOrder.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/orders/{order_id}`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListOrders returns paginated list of orders.
         * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [folderId] The folder_id adds filtering by folder. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListOrders(shopId: string, pageSize?: number, pageToken?: string, folderId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceListOrders.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}/orders`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetOrder returns an order.
         * @param {string} shopId The Shopify Store.
         * @param {string} orderId The field will contain id of order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetOrder(shopId: string, orderId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Order> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersServiceGetOrder(shopId, orderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ListOrders returns paginated list of orders.
         * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [folderId] The folder_id adds filtering by folder. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListOrders(shopId: string, pageSize?: number, pageToken?: string, folderId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListOrdersResponse> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).ordersServiceListOrders(shopId, pageSize, pageToken, folderId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary GetOrder returns an order.
         * @param {string} shopId The Shopify Store.
         * @param {string} orderId The field will contain id of order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetOrder(shopId: string, orderId: string, options?: any) {
            return OrdersApiFp(configuration).ordersServiceGetOrder(shopId, orderId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ListOrders returns paginated list of orders.
         * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {string} [folderId] The folder_id adds filtering by folder. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListOrders(shopId: string, pageSize?: number, pageToken?: string, folderId?: string, options?: any) {
            return OrdersApiFp(configuration).ordersServiceListOrders(shopId, pageSize, pageToken, folderId, options)(fetch, basePath);
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary GetOrder returns an order.
     * @param {string} shopId The Shopify Store.
     * @param {string} orderId The field will contain id of order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersServiceGetOrder(shopId: string, orderId: string, options?: any) {
        return OrdersApiFp(this.configuration).ordersServiceGetOrder(shopId, orderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ListOrders returns paginated list of orders.
     * @param {string} shopId The shop_id adds filtering by Shopify&#39;s shop.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {string} [folderId] The folder_id adds filtering by folder. Optional.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersServiceListOrders(shopId: string, pageSize?: number, pageToken?: string, folderId?: string, options?: any) {
        return OrdersApiFp(this.configuration).ordersServiceListOrders(shopId, pageSize, pageToken, folderId, options)(this.fetch, this.basePath);
    }

}

/**
 * ShopsApi - fetch parameter creator
 * @export
 */
export const ShopsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateShop creates a shop.
         * @param {Shop} body The shop resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateShop(body: Shop, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersServiceCreateShop.');
            }
            const localVarPath = `/api/ordersapi/v1/shops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteShop deletes a shop.
         * @param {string} shopId The resource id of the shop to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceDeleteShop(shopId: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceDeleteShop.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetShop returns a shop.
         * @param {string} shopId The field will contain id of shop.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetShop(shopId: string, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceGetShop.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop_id}`
                .replace(`{${"shop_id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetShopByDomain returns a shop by domain.
         * @param {string} domain The field will contain domain of shop.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetShopByDomain(domain: string, options: any = {}): FetchArgs {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling ordersServiceGetShopByDomain.');
            }
            const localVarPath = `/api/ordersapi/v1/shops:getByDomain/{domain}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListShops returns paginated list of shops.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListShops(pageSize?: number, pageToken?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/ordersapi/v1/shops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateShop updates a shop.
         * @param {string} shopId The shop ID.
         * @param {UpdateShopRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceUpdateShop(shopId: string, body: UpdateShopRequest, options: any = {}): FetchArgs {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling ordersServiceUpdateShop.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling ordersServiceUpdateShop.');
            }
            const localVarPath = `/api/ordersapi/v1/shops/{shop.id}`
                .replace(`{${"shop.id"}}`, encodeURIComponent(String(shopId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopsApi - functional programming interface
 * @export
 */
export const ShopsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateShop creates a shop.
         * @param {Shop} body The shop resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateShop(body: Shop, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shop> {
            const localVarFetchArgs = ShopsApiFetchParamCreator(configuration).ordersServiceCreateShop(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary DeleteShop deletes a shop.
         * @param {string} shopId The resource id of the shop to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceDeleteShop(shopId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ShopsApiFetchParamCreator(configuration).ordersServiceDeleteShop(shopId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GetShop returns a shop.
         * @param {string} shopId The field will contain id of shop.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetShop(shopId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shop> {
            const localVarFetchArgs = ShopsApiFetchParamCreator(configuration).ordersServiceGetShop(shopId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GetShopByDomain returns a shop by domain.
         * @param {string} domain The field will contain domain of shop.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetShopByDomain(domain: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shop> {
            const localVarFetchArgs = ShopsApiFetchParamCreator(configuration).ordersServiceGetShopByDomain(domain, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ListShops returns paginated list of shops.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListShops(pageSize?: number, pageToken?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListShopsResponse> {
            const localVarFetchArgs = ShopsApiFetchParamCreator(configuration).ordersServiceListShops(pageSize, pageToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary UpdateShop updates a shop.
         * @param {string} shopId The shop ID.
         * @param {UpdateShopRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceUpdateShop(shopId: string, body: UpdateShopRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Shop> {
            const localVarFetchArgs = ShopsApiFetchParamCreator(configuration).ordersServiceUpdateShop(shopId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ShopsApi - factory interface
 * @export
 */
export const ShopsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary CreateShop creates a shop.
         * @param {Shop} body The shop resource to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceCreateShop(body: Shop, options?: any) {
            return ShopsApiFp(configuration).ordersServiceCreateShop(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary DeleteShop deletes a shop.
         * @param {string} shopId The resource id of the shop to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceDeleteShop(shopId: string, options?: any) {
            return ShopsApiFp(configuration).ordersServiceDeleteShop(shopId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GetShop returns a shop.
         * @param {string} shopId The field will contain id of shop.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetShop(shopId: string, options?: any) {
            return ShopsApiFp(configuration).ordersServiceGetShop(shopId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GetShopByDomain returns a shop by domain.
         * @param {string} domain The field will contain domain of shop.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceGetShopByDomain(domain: string, options?: any) {
            return ShopsApiFp(configuration).ordersServiceGetShopByDomain(domain, options)(fetch, basePath);
        },
        /**
         * 
         * @summary ListShops returns paginated list of shops.
         * @param {number} [pageSize] The maximum number of items to return.
         * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceListShops(pageSize?: number, pageToken?: string, options?: any) {
            return ShopsApiFp(configuration).ordersServiceListShops(pageSize, pageToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary UpdateShop updates a shop.
         * @param {string} shopId The shop ID.
         * @param {UpdateShopRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersServiceUpdateShop(shopId: string, body: UpdateShopRequest, options?: any) {
            return ShopsApiFp(configuration).ordersServiceUpdateShop(shopId, body, options)(fetch, basePath);
        },
    };
};

/**
 * ShopsApi - object-oriented interface
 * @export
 * @class ShopsApi
 * @extends {BaseAPI}
 */
export class ShopsApi extends BaseAPI {
    /**
     * 
     * @summary CreateShop creates a shop.
     * @param {Shop} body The shop resource to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public ordersServiceCreateShop(body: Shop, options?: any) {
        return ShopsApiFp(this.configuration).ordersServiceCreateShop(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary DeleteShop deletes a shop.
     * @param {string} shopId The resource id of the shop to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public ordersServiceDeleteShop(shopId: string, options?: any) {
        return ShopsApiFp(this.configuration).ordersServiceDeleteShop(shopId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GetShop returns a shop.
     * @param {string} shopId The field will contain id of shop.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public ordersServiceGetShop(shopId: string, options?: any) {
        return ShopsApiFp(this.configuration).ordersServiceGetShop(shopId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GetShopByDomain returns a shop by domain.
     * @param {string} domain The field will contain domain of shop.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public ordersServiceGetShopByDomain(domain: string, options?: any) {
        return ShopsApiFp(this.configuration).ordersServiceGetShopByDomain(domain, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ListShops returns paginated list of shops.
     * @param {number} [pageSize] The maximum number of items to return.
     * @param {string} [pageToken] The next_page_token value returned from a previous List request, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public ordersServiceListShops(pageSize?: number, pageToken?: string, options?: any) {
        return ShopsApiFp(this.configuration).ordersServiceListShops(pageSize, pageToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary UpdateShop updates a shop.
     * @param {string} shopId The shop ID.
     * @param {UpdateShopRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public ordersServiceUpdateShop(shopId: string, body: UpdateShopRequest, options?: any) {
        return ShopsApiFp(this.configuration).ordersServiceUpdateShop(shopId, body, options)(this.fetch, this.basePath);
    }

}

