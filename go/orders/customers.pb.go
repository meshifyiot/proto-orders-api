// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customers.proto

package orders

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CustomerId struct {
	DomainId             int64    `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerId) Reset()         { *m = CustomerId{} }
func (m *CustomerId) String() string { return proto.CompactTextString(m) }
func (*CustomerId) ProtoMessage()    {}
func (*CustomerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8869719da4d4f36a, []int{0}
}

func (m *CustomerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerId.Unmarshal(m, b)
}
func (m *CustomerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerId.Marshal(b, m, deterministic)
}
func (m *CustomerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerId.Merge(m, src)
}
func (m *CustomerId) XXX_Size() int {
	return xxx_messageInfo_CustomerId.Size(m)
}
func (m *CustomerId) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerId.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerId proto.InternalMessageInfo

func (m *CustomerId) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *CustomerId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Customer struct {
	DomainId             int64                `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Id                   int64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Email                string               `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	FirstName            string               `protobuf:"bytes,11,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string               `protobuf:"bytes,12,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	State                string               `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	Note                 string               `protobuf:"bytes,14,opt,name=note,proto3" json:"note,omitempty"`
	Phone                string               `protobuf:"bytes,15,opt,name=phone,proto3" json:"phone,omitempty"`
	DefaultAddress       *Address             `protobuf:"bytes,16,opt,name=default_address,json=defaultAddress,proto3" json:"default_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8869719da4d4f36a, []int{1}
}

func (m *Customer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Customer.Unmarshal(m, b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
}
func (m *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(m, src)
}
func (m *Customer) XXX_Size() int {
	return xxx_messageInfo_Customer.Size(m)
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetDomainId() int64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *Customer) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Customer) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Customer) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Customer) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Customer) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Customer) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Customer) GetDefaultAddress() *Address {
	if m != nil {
		return m.DefaultAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*CustomerId)(nil), "CustomerId")
	proto.RegisterType((*Customer)(nil), "Customer")
}

func init() { proto.RegisterFile("customers.proto", fileDescriptor_8869719da4d4f36a) }

var fileDescriptor_8869719da4d4f36a = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0xea, 0xd3, 0x40,
	0x10, 0x27, 0xf9, 0xdb, 0x90, 0x4c, 0xb5, 0x91, 0xa5, 0xc8, 0x92, 0x52, 0x2d, 0x3d, 0xf5, 0x62,
	0x8a, 0xf5, 0xd4, 0x63, 0xad, 0x22, 0xbd, 0x78, 0x08, 0x7a, 0xf1, 0x12, 0xb6, 0xdd, 0x69, 0x0d,
	0x64, 0xb3, 0x61, 0x77, 0x72, 0xf0, 0xd1, 0x7c, 0x2d, 0x9f, 0x40, 0xb2, 0xd9, 0x50, 0x54, 0x54,
	0xbc, 0xed, 0xef, 0x6b, 0x32, 0x33, 0x19, 0x48, 0x2f, 0x9d, 0x25, 0xad, 0xd0, 0xd8, 0xbc, 0x35,
	0x9a, 0x74, 0xb6, 0xb8, 0x69, 0x7d, 0xab, 0x71, 0xeb, 0xd0, 0xb9, 0xbb, 0x6e, 0x51, 0xb5, 0xf4,
	0xd5, 0x8b, 0x2f, 0x7e, 0x15, 0xa9, 0x52, 0x68, 0x49, 0xa8, 0xd6, 0x1b, 0x52, 0x21, 0xa5, 0x41,
	0x6b, 0xd1, 0x97, 0x5b, 0xef, 0x01, 0x8e, 0xfe, 0x0b, 0x27, 0xc9, 0x16, 0x90, 0x48, 0xad, 0x44,
	0xd5, 0x94, 0x95, 0xe4, 0xc1, 0x2a, 0xd8, 0x3c, 0x14, 0xf1, 0x40, 0x9c, 0x24, 0x9b, 0x41, 0x58,
	0x49, 0x1e, 0x3a, 0x36, 0xac, 0xe4, 0xfa, 0x7b, 0x08, 0xf1, 0x98, 0xfd, 0xaf, 0x24, 0xdb, 0x03,
	0x5c, 0x0c, 0x0a, 0x42, 0x59, 0x0a, 0xe2, 0xf1, 0x2a, 0xd8, 0x4c, 0x77, 0x59, 0x3e, 0xf4, 0x9e,
	0x8f, 0xbd, 0xe7, 0x1f, 0xc7, 0xde, 0x8b, 0xc4, 0xbb, 0x0f, 0xd4, 0x47, 0xbb, 0x56, 0x8e, 0xd1,
	0xe4, 0xdf, 0x51, 0xef, 0x3e, 0x10, 0x9b, 0xc3, 0x04, 0x95, 0xa8, 0x6a, 0x0e, 0xab, 0x60, 0x93,
	0x14, 0x03, 0x60, 0x4b, 0x80, 0x6b, 0x65, 0x2c, 0x95, 0x8d, 0x50, 0xc8, 0xa7, 0x4e, 0x4a, 0x1c,
	0xf3, 0x41, 0x28, 0xec, 0xe7, 0xaa, 0xc5, 0xa8, 0x3e, 0x76, 0x6a, 0xdc, 0x13, 0x4e, 0x9c, 0xc3,
	0xc4, 0x92, 0x20, 0xe4, 0x4f, 0x86, 0x8a, 0x0e, 0x30, 0x06, 0x8f, 0x1a, 0x4d, 0xc8, 0x67, 0x8e,
	0x74, 0xef, 0xde, 0xd9, 0x7e, 0xd1, 0x0d, 0xf2, 0x74, 0x70, 0x3a, 0xc0, 0x5e, 0x41, 0x2a, 0xf1,
	0x2a, 0xba, 0x9a, 0x4a, 0xff, 0x5f, 0xf8, 0x53, 0x37, 0x51, 0x9c, 0x1f, 0x06, 0x5c, 0xcc, 0xbc,
	0xc1, 0xe3, 0xdd, 0xb7, 0x00, 0x92, 0x71, 0xe9, 0x96, 0x3d, 0x87, 0xe8, 0xe8, 0x56, 0xc3, 0x92,
	0x7c, 0x64, 0xb3, 0xfb, 0xb3, 0xd7, 0x3f, 0xb9, 0xf9, 0xff, 0xa6, 0x5b, 0x34, 0xf4, 0x07, 0xfd,
	0x25, 0x44, 0x6f, 0xb1, 0x46, 0x42, 0x36, 0xcd, 0xef, 0x67, 0x92, 0x3d, 0xfb, 0x6d, 0xe1, 0xef,
	0xfa, 0x23, 0x64, 0x4b, 0x78, 0x78, 0x8f, 0xf4, 0xb3, 0xf7, 0x5e, 0xed, 0x4d, 0xfc, 0x39, 0xd2,
	0x46, 0xa2, 0xb1, 0xe7, 0xc8, 0x05, 0x5f, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x97, 0x75, 0x04,
	0x82, 0xde, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomersClient is the client API for Customers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomersClient interface {
	Create(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	Update(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	Upsert(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	Delete(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*Customer, error)
}

type customersClient struct {
	cc *grpc.ClientConn
}

func NewCustomersClient(cc *grpc.ClientConn) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) Create(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/Customers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Update(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/Customers/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Upsert(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/Customers/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Delete(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Customers/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) Get(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/Customers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersServer is the server API for Customers service.
type CustomersServer interface {
	Create(context.Context, *Customer) (*Customer, error)
	Update(context.Context, *Customer) (*Customer, error)
	Upsert(context.Context, *Customer) (*Customer, error)
	Delete(context.Context, *CustomerId) (*empty.Empty, error)
	Get(context.Context, *CustomerId) (*Customer, error)
}

// UnimplementedCustomersServer can be embedded to have forward compatible implementations.
type UnimplementedCustomersServer struct {
}

func (*UnimplementedCustomersServer) Create(ctx context.Context, req *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomersServer) Update(ctx context.Context, req *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCustomersServer) Upsert(ctx context.Context, req *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (*UnimplementedCustomersServer) Delete(ctx context.Context, req *CustomerId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCustomersServer) Get(ctx context.Context, req *CustomerId) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCustomersServer(s *grpc.Server, srv CustomersServer) {
	s.RegisterService(&_Customers_serviceDesc, srv)
}

func _Customers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Create(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Update(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customers/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Upsert(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Delete(ctx, req.(*CustomerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Get(ctx, req.(*CustomerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Customers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Customers",
	HandlerType: (*CustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Customers_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Customers_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Customers_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Customers_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Customers_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customers.proto",
}
