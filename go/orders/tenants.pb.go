// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orders/tenants.proto

package orders

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TenantId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TenantId) Reset()         { *m = TenantId{} }
func (m *TenantId) String() string { return proto.CompactTextString(m) }
func (*TenantId) ProtoMessage()    {}
func (*TenantId) Descriptor() ([]byte, []int) {
	return fileDescriptor_52195dfaea4446fc, []int{0}
}

func (m *TenantId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TenantId.Unmarshal(m, b)
}
func (m *TenantId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TenantId.Marshal(b, m, deterministic)
}
func (m *TenantId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantId.Merge(m, src)
}
func (m *TenantId) XXX_Size() int {
	return xxx_messageInfo_TenantId.Size(m)
}
func (m *TenantId) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantId.DiscardUnknown(m)
}

var xxx_messageInfo_TenantId proto.InternalMessageInfo

func (m *TenantId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Tenant struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Tenant) Reset()         { *m = Tenant{} }
func (m *Tenant) String() string { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()    {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_52195dfaea4446fc, []int{1}
}

func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tenant.Unmarshal(m, b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
}
func (m *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(m, src)
}
func (m *Tenant) XXX_Size() int {
	return xxx_messageInfo_Tenant.Size(m)
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Tenant) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*TenantId)(nil), "TenantId")
	proto.RegisterType((*Tenant)(nil), "Tenant")
}

func init() { proto.RegisterFile("orders/tenants.proto", fileDescriptor_52195dfaea4446fc) }

var fileDescriptor_52195dfaea4446fc = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xd9, 0xb6, 0xa4, 0xcd, 0x14, 0x3c, 0x2c, 0x22, 0x71, 0x3d, 0x18, 0x7b, 0x0a, 0x08,
	0x1b, 0xa8, 0x27, 0x8f, 0xad, 0xb1, 0xc5, 0x8b, 0x60, 0xa8, 0x17, 0x2f, 0xb2, 0x75, 0xc7, 0x12,
	0x68, 0xb2, 0x31, 0x99, 0x1e, 0xfa, 0x77, 0x3c, 0xfb, 0x23, 0x25, 0x9b, 0x6c, 0x91, 0x2a, 0x78,
	0x9b, 0xe4, 0x7d, 0xef, 0xcd, 0x63, 0x16, 0x4e, 0x4d, 0xa5, 0xb1, 0xaa, 0x63, 0xc2, 0x42, 0x15,
	0x54, 0xcb, 0xb2, 0x32, 0x64, 0xc4, 0xe5, 0xc6, 0x98, 0xcd, 0x16, 0x63, 0xfb, 0xb5, 0xde, 0xbd,
	0xc7, 0x94, 0xe5, 0x58, 0x93, 0xca, 0xcb, 0x0e, 0xb8, 0x38, 0x06, 0x30, 0x2f, 0x69, 0xdf, 0x89,
	0x2e, 0x53, 0x9b, 0x5c, 0x65, 0x45, 0x97, 0x39, 0x11, 0x30, 0x5a, 0xd9, 0x25, 0x0f, 0x9a, 0x9f,
	0x40, 0x2f, 0xd3, 0x01, 0x0b, 0x59, 0xd4, 0x4f, 0x7b, 0x99, 0x9e, 0x7c, 0x32, 0xf0, 0x5a, 0xf1,
	0x58, 0xe2, 0x1c, 0x06, 0x85, 0xca, 0x31, 0xe8, 0x85, 0x2c, 0xf2, 0x53, 0x3b, 0xf3, 0x5b, 0x80,
	0xb7, 0x0a, 0x15, 0xa1, 0x7e, 0x55, 0x14, 0xf4, 0x43, 0x16, 0x8d, 0xa7, 0x42, 0xb6, 0x95, 0xa4,
	0xab, 0x24, 0x57, 0xae, 0x73, 0xea, 0x77, 0xf4, 0x8c, 0x1a, 0xeb, 0xae, 0xd4, 0xce, 0x3a, 0xf8,
	0xdf, 0xda, 0xd1, 0x33, 0x9a, 0x7e, 0x31, 0x18, 0xb6, 0x25, 0x6b, 0x2e, 0xc0, 0xbb, 0xb3, 0x99,
	0x7c, 0x28, 0xdb, 0x7f, 0xc2, 0x0d, 0x8d, 0xf6, 0x6c, 0x4d, 0x7f, 0x68, 0xd7, 0xe0, 0x25, 0xb8,
	0x45, 0x42, 0xee, 0x4b, 0x77, 0x0d, 0x71, 0xf6, 0x6b, 0xff, 0x7d, 0x73, 0x4d, 0x7e, 0x0e, 0xfd,
	0x25, 0xd2, 0x4f, 0xf2, 0x90, 0x73, 0x05, 0xfe, 0x12, 0x69, 0xbe, 0x5f, 0x3c, 0x25, 0x8f, 0x7c,
	0x2c, 0x13, 0x7b, 0xe9, 0xc5, 0x87, 0x2e, 0x0e, 0xc8, 0x7c, 0xf4, 0xe2, 0xb5, 0xef, 0xb0, 0xf6,
	0x6c, 0xee, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x4c, 0x03, 0x41, 0xec, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TenantsClient is the client API for Tenants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TenantsClient interface {
	Create(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	Update(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	Delete(ctx context.Context, in *TenantId, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *TenantId, opts ...grpc.CallOption) (*Tenant, error)
	GetByFQDN(ctx context.Context, in *DomainFqdn, opts ...grpc.CallOption) (*Tenant, error)
}

type tenantsClient struct {
	cc *grpc.ClientConn
}

func NewTenantsClient(cc *grpc.ClientConn) TenantsClient {
	return &tenantsClient{cc}
}

func (c *tenantsClient) Create(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/Tenants/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) Update(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/Tenants/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) Delete(ctx context.Context, in *TenantId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Tenants/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) Get(ctx context.Context, in *TenantId, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/Tenants/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) GetByFQDN(ctx context.Context, in *DomainFqdn, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/Tenants/GetByFQDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantsServer is the server API for Tenants service.
type TenantsServer interface {
	Create(context.Context, *Tenant) (*Tenant, error)
	Update(context.Context, *Tenant) (*Tenant, error)
	Delete(context.Context, *TenantId) (*empty.Empty, error)
	Get(context.Context, *TenantId) (*Tenant, error)
	GetByFQDN(context.Context, *DomainFqdn) (*Tenant, error)
}

// UnimplementedTenantsServer can be embedded to have forward compatible implementations.
type UnimplementedTenantsServer struct {
}

func (*UnimplementedTenantsServer) Create(ctx context.Context, req *Tenant) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTenantsServer) Update(ctx context.Context, req *Tenant) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTenantsServer) Delete(ctx context.Context, req *TenantId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTenantsServer) Get(ctx context.Context, req *TenantId) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTenantsServer) GetByFQDN(ctx context.Context, req *DomainFqdn) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFQDN not implemented")
}

func RegisterTenantsServer(s *grpc.Server, srv TenantsServer) {
	s.RegisterService(&_Tenants_serviceDesc, srv)
}

func _Tenants_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tenants/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).Create(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tenants/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).Update(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tenants/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).Delete(ctx, req.(*TenantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tenants/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).Get(ctx, req.(*TenantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_GetByFQDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainFqdn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).GetByFQDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tenants/GetByFQDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).GetByFQDN(ctx, req.(*DomainFqdn))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tenants_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Tenants",
	HandlerType: (*TenantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Tenants_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tenants_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Tenants_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tenants_Get_Handler,
		},
		{
			MethodName: "GetByFQDN",
			Handler:    _Tenants_GetByFQDN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orders/tenants.proto",
}
