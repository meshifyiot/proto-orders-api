// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orders/orders_service.proto

package orders

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("orders/orders_service.proto", fileDescriptor_54c74d5426efd887) }

var fileDescriptor_54c74d5426efd887 = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0x91, 0x02, 0xcd, 0x1a, 0xda, 0x71, 0x9c, 0xe3, 0xda, 0xf9, 0x70, 0xb2, 0xb6, 0xea,
	0x56, 0x6c, 0x46, 0x4d, 0x2d, 0xde, 0x9d, 0xae, 0xd6, 0x26, 0xad, 0x97, 0x21, 0xfb, 0x68, 0x97,
	0x16, 0xe8, 0x86, 0x22, 0x90, 0x25, 0xda, 0x51, 0x66, 0x7d, 0xc4, 0xa4, 0x33, 0x04, 0x46, 0x6e,
	0xf6, 0x08, 0xcb, 0xfd, 0xf6, 0x50, 0x7b, 0x85, 0x3d, 0xc8, 0xa0, 0x43, 0x52, 0xa6, 0x6c, 0x39,
	0xde, 0x95, 0x78, 0xfe, 0x22, 0x7f, 0xe7, 0xf0, 0xfc, 0x69, 0x8b, 0xa4, 0x19, 0x8f, 0x7c, 0x36,
	0xe2, 0xb6, 0x7c, 0x9c, 0x71, 0x36, 0xba, 0x0a, 0x3c, 0x46, 0x93, 0x51, 0x2c, 0xe2, 0xdd, 0xbd,
	0x41, 0x1c, 0x0f, 0x86, 0xcc, 0x76, 0x93, 0xc0, 0x76, 0xa3, 0x28, 0x16, 0xae, 0x08, 0xe2, 0x88,
	0xab, 0xb7, 0x4d, 0xf5, 0x16, 0xa3, 0xde, 0xb8, 0x6f, 0xb3, 0x30, 0x11, 0xd7, 0xea, 0xe5, 0x73,
	0x7c, 0x78, 0xed, 0x01, 0x8b, 0xda, 0xfc, 0x77, 0x77, 0x30, 0x60, 0x23, 0x3b, 0x4e, 0x70, 0x79,
	0x01, 0xaa, 0xa6, 0xaa, 0x10, 0x2c, 0x72, 0x23, 0x31, 0x23, 0xfa, 0x71, 0xe8, 0x06, 0x91, 0x12,
	0x1b, 0x4a, 0x1c, 0x06, 0x11, 0x3b, 0x0b, 0x04, 0x0b, 0x95, 0x5e, 0x57, 0xba, 0x37, 0xe6, 0x22,
	0x0e, 0xd9, 0x48, 0xc9, 0x60, 0x6e, 0x4f, 0x69, 0xdb, 0x4a, 0xeb, 0x8f, 0x87, 0xfd, 0x60, 0x38,
	0x0c, 0x99, 0xce, 0xd8, 0xf9, 0x0b, 0xc8, 0xfa, 0x8f, 0xf8, 0xf2, 0x67, 0xd9, 0x07, 0x38, 0x26,
	0xe4, 0x24, 0xe0, 0x42, 0x8a, 0x00, 0x74, 0x1a, 0xbc, 0x65, 0x97, 0x63, 0xc6, 0xc5, 0x6e, 0x2d,
	0xa7, 0xf1, 0x24, 0x8e, 0x38, 0xb3, 0xe0, 0x8f, 0x7f, 0xfe, 0xbd, 0xbd, 0x57, 0x06, 0x62, 0x5f,
	0x1d, 0xa8, 0xd6, 0xc2, 0x21, 0x79, 0xd0, 0x65, 0x72, 0x22, 0x54, 0xa9, 0x1e, 0x6a, 0xcc, 0x2a,
	0xc5, 0xd0, 0xda, 0xc7, 0x95, 0x5b, 0x50, 0x9f, 0xae, 0xb4, 0x27, 0xf8, 0x3c, 0x0b, 0xfc, 0x1b,
	0x78, 0x45, 0x4a, 0x87, 0x23, 0xe6, 0x0a, 0x26, 0x39, 0x35, 0x6a, 0x44, 0xb3, 0xa8, 0x1d, 0x44,
	0xd5, 0x2c, 0xa3, 0x08, 0xe7, 0x3e, 0x3e, 0xe1, 0x84, 0x94, 0xde, 0x25, 0xbe, 0x81, 0x31, 0xa2,
	0x59, 0xcc, 0x63, 0xc4, 0xec, 0x76, 0xe6, 0x2b, 0xa2, 0x81, 0x7f, 0xe3, 0xac, 0xb4, 0xe0, 0x03,
	0x29, 0x1d, 0xb1, 0x21, 0x9b, 0xd2, 0x8c, 0x48, 0xd3, 0x1a, 0x54, 0x9e, 0x16, 0xaa, 0x4f, 0x0b,
	0x7d, 0x95, 0x9e, 0x16, 0xbd, 0xdf, 0xd6, 0x82, 0xfd, 0xbe, 0x23, 0xeb, 0x69, 0x7b, 0x0f, 0x95,
	0xab, 0x1c, 0xea, 0x34, 0x17, 0x4f, 0xf1, 0x33, 0xb2, 0x32, 0xa2, 0x8e, 0xf8, 0x0d, 0x58, 0x4f,
	0xf1, 0x5e, 0x46, 0x79, 0x4b, 0x4a, 0x5d, 0x96, 0x4d, 0x87, 0x1a, 0x35, 0x22, 0x8d, 0x5c, 0xa3,
	0x5a, 0xb1, 0x9e, 0x22, 0x65, 0x1f, 0x9a, 0x39, 0x8a, 0x3d, 0xd1, 0x43, 0x2c, 0xf5, 0x94, 0x54,
	0xa4, 0x19, 0x19, 0xb6, 0x41, 0xf3, 0x42, 0x01, 0xf9, 0x11, 0x92, 0x77, 0xac, 0x7c, 0x7d, 0xce,
	0x03, 0x3d, 0x84, 0x5f, 0x49, 0x45, 0x7a, 0x63, 0x50, 0xf3, 0x42, 0x01, 0xf5, 0x19, 0x52, 0x1f,
	0x77, 0x16, 0xd5, 0xab, 0x8d, 0x63, 0xa4, 0x22, 0xad, 0x32, 0xe0, 0x79, 0x61, 0x99, 0x7d, 0xaa,
	0x33, 0xad, 0x3b, 0x3b, 0xf3, 0x5e, 0x9a, 0x78, 0x12, 0x44, 0xec, 0x58, 0xb0, 0x50, 0x9b, 0x98,
	0xc5, 0x79, 0x13, 0x0d, 0x59, 0x99, 0xd8, 0xc0, 0x24, 0x55, 0xa8, 0xa4, 0x49, 0xb2, 0x1f, 0x3e,
	0x87, 0x53, 0x74, 0x51, 0xcf, 0x97, 0x2e, 0xea, 0x68, 0xda, 0x15, 0xad, 0x58, 0x9f, 0x23, 0xe6,
	0x11, 0xec, 0xe7, 0x31, 0xf6, 0x24, 0x1b, 0xab, 0x6a, 0x95, 0x8f, 0x19, 0x58, 0xfb, 0x78, 0x07,
	0xfb, 0x09, 0xb2, 0x9b, 0xd6, 0x4c, 0x89, 0xce, 0x5a, 0x36, 0x86, 0x8f, 0xda, 0x49, 0x83, 0x9b,
	0x17, 0x0a, 0xb8, 0x5f, 0x20, 0xd7, 0xea, 0x2c, 0xae, 0x59, 0x7b, 0x39, 0xd0, 0x5e, 0x1a, 0xf8,
	0xbc, 0xb0, 0xcc, 0x4b, 0xd5, 0x9f, 0xd6, 0x92, 0xfe, 0x7c, 0x4f, 0x4a, 0xa9, 0x4d, 0x47, 0xf8,
	0xaf, 0xcc, 0x41, 0xfe, 0xff, 0xa9, 0x48, 0xa7, 0x78, 0x98, 0x17, 0x95, 0x8f, 0x35, 0x4c, 0xb0,
	0x0e, 0xa5, 0x34, 0x81, 0xaf, 0xd6, 0x7f, 0x4b, 0xd6, 0xba, 0x4c, 0x4d, 0x85, 0x4d, 0x9a, 0x8d,
	0x35, 0xea, 0x13, 0x2a, 0x63, 0xfd, 0x53, 0x81, 0x2d, 0x63, 0xb5, 0x3d, 0x91, 0x03, 0x2c, 0xec,
	0x3b, 0x52, 0x96, 0x3e, 0x29, 0xd8, 0x43, 0x6a, 0x86, 0x73, 0xbc, 0x26, 0xf2, 0xea, 0x96, 0x59,
	0x8d, 0xb3, 0x2a, 0x07, 0xf0, 0x86, 0x94, 0xa5, 0x37, 0x19, 0xcb, 0x0c, 0xe7, 0x58, 0x16, 0xb2,
	0xf6, 0x3a, 0x45, 0xb5, 0x69, 0x83, 0x3e, 0x92, 0xb2, 0xf4, 0x23, 0x43, 0x9a, 0xe1, 0x32, 0x73,
	0xd4, 0xee, 0x5b, 0x0b, 0x77, 0xef, 0x92, 0x6a, 0xda, 0xf3, 0xd7, 0xd3, 0x8f, 0x1a, 0x87, 0x6d,
	0x3a, 0x2b, 0xe9, 0x34, 0x3b, 0x05, 0x6f, 0x94, 0x4b, 0xdb, 0x98, 0x09, 0xa0, 0x9a, 0x66, 0xea,
	0x9b, 0x38, 0x97, 0x54, 0xba, 0xcc, 0x5c, 0x04, 0x0d, 0x9a, 0x17, 0x34, 0xbe, 0x4c, 0x0d, 0xd1,
	0xfa, 0x12, 0x89, 0x4f, 0xe1, 0xc9, 0x2c, 0xd1, 0x9e, 0x18, 0x11, 0xee, 0xc2, 0x23, 0x9b, 0xd2,
	0x34, 0x33, 0xcb, 0x0e, 0x9d, 0xd3, 0x8a, 0x13, 0xa9, 0x13, 0x6c, 0xcd, 0x95, 0xee, 0x94, 0x8c,
	0x08, 0x2e, 0xc8, 0xa6, 0x74, 0x33, 0x9f, 0x64, 0x4e, 0x2b, 0x4e, 0xf2, 0x1c, 0x93, 0x3c, 0xeb,
	0xdc, 0xbd, 0x1b, 0xed, 0xfa, 0x25, 0xd9, 0x94, 0x36, 0xe7, 0x73, 0xcd, 0x69, 0xcb, 0xfc, 0x57,
	0x3d, 0x6c, 0xfd, 0x8f, 0x1e, 0x7e, 0x20, 0x1b, 0x5d, 0x26, 0x4e, 0xf1, 0x2a, 0xf5, 0xf2, 0xfa,
	0xf5, 0x9b, 0xa3, 0x1f, 0x60, 0x8b, 0xce, 0x28, 0xd3, 0x13, 0x2c, 0x55, 0xeb, 0x33, 0xe4, 0x7f,
	0x0a, 0x7b, 0x29, 0x5f, 0x5e, 0xc3, 0xb8, 0x33, 0x60, 0x6a, 0xba, 0x3d, 0xe9, 0x5f, 0xfa, 0xd1,
	0xcd, 0xcb, 0xbf, 0x57, 0xfe, 0x7c, 0x71, 0xbb, 0x02, 0x17, 0x64, 0x4d, 0x5e, 0x78, 0x5e, 0xfc,
	0x74, 0x6c, 0xbd, 0x27, 0x35, 0xcf, 0x1d, 0xf5, 0xe2, 0xa8, 0xdd, 0x73, 0xbd, 0xdf, 0x58, 0xe4,
	0xb7, 0x05, 0x73, 0x43, 0xa0, 0xe7, 0x42, 0x24, 0xdc, 0xb1, 0xed, 0x41, 0x20, 0xce, 0xc7, 0x3d,
	0xea, 0xc5, 0xa1, 0x1d, 0x32, 0x7e, 0x1e, 0xf4, 0xaf, 0x83, 0x58, 0xc8, 0x4b, 0x63, 0x5b, 0x7e,
	0xf0, 0xdb, 0x6e, 0x12, 0xec, 0x6e, 0xf8, 0xec, 0xea, 0x1b, 0x35, 0x21, 0x9d, 0xdc, 0xb9, 0x7f,
	0x40, 0x0f, 0xe8, 0x57, 0xad, 0x95, 0x7b, 0x9d, 0xaa, 0x9b, 0x24, 0xc3, 0xc0, 0xc3, 0x1b, 0xa3,
	0x7d, 0xc1, 0xe3, 0xc8, 0x99, 0x53, 0x7e, 0x59, 0x95, 0xa8, 0xde, 0x2a, 0x82, 0xbf, 0xfe, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x67, 0x2e, 0x05, 0xcd, 0xd8, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrdersServiceClient is the client API for OrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrdersServiceClient interface {
	// ListOrders returns paginated list of orders.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// GetOrder returns an order.
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// CreateOrder creates an order.
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// UpdateOrder updates an order.
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// DeleteOrder deletes an order.
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListCustomers(ctx context.Context, in *ListCustomersRequest, opts ...grpc.CallOption) (*ListCustomersResponse, error)
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListLineItems(ctx context.Context, in *ListLineItemsRequest, opts ...grpc.CallOption) (*ListLineItemsResponse, error)
	GetLineItem(ctx context.Context, in *GetLineItemRequest, opts ...grpc.CallOption) (*LineItem, error)
	CreateLineItem(ctx context.Context, in *CreateLineItemRequest, opts ...grpc.CallOption) (*LineItem, error)
	UpdateLineItem(ctx context.Context, in *UpdateLineItemRequest, opts ...grpc.CallOption) (*LineItem, error)
	DeleteLineItem(ctx context.Context, in *DeleteLineItemRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ListDomains returns paginated list of domains.
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// GetDomain returns a domain.
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// CreateDomain creates a domain.
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// UpdateDomain updates a domain.
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// DeleteDomain deletes a domain.
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ListFulfillments returns paginated list of fulfillments.
	ListFulfillments(ctx context.Context, in *ListFulfillmentsRequest, opts ...grpc.CallOption) (*ListFulfillmentsResponse, error)
	// GetFulfillment returns a fulfillment.
	GetFulfillment(ctx context.Context, in *GetFulfillmentRequest, opts ...grpc.CallOption) (*Fulfillment, error)
	// CreateFulfillment creates a fulfillment.
	CreateFulfillment(ctx context.Context, in *CreateFulfillmentRequest, opts ...grpc.CallOption) (*Fulfillment, error)
	// UpdateFulfillment updates a fulfillment.
	UpdateFulfillment(ctx context.Context, in *UpdateFulfillmentRequest, opts ...grpc.CallOption) (*Fulfillment, error)
	// DeleteFulfillment deletes a fulfillment.
	DeleteFulfillment(ctx context.Context, in *DeleteFulfillmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetTenant returns a tenant by Shopify domain FQDN.
	GetTenantByFQDN(ctx context.Context, in *GetTenantByFQDNRequest, opts ...grpc.CallOption) (*Tenant, error)
}

type ordersServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrdersServiceClient(cc *grpc.ClientConn) OrdersServiceClient {
	return &ordersServiceClient{cc}
}

func (c *ordersServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/OrdersService/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/OrdersService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/OrdersService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/OrdersService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/OrdersService/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) ListCustomers(ctx context.Context, in *ListCustomersRequest, opts ...grpc.CallOption) (*ListCustomersResponse, error) {
	out := new(ListCustomersResponse)
	err := c.cc.Invoke(ctx, "/OrdersService/ListCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/OrdersService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/OrdersService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/OrdersService/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/OrdersService/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) ListLineItems(ctx context.Context, in *ListLineItemsRequest, opts ...grpc.CallOption) (*ListLineItemsResponse, error) {
	out := new(ListLineItemsResponse)
	err := c.cc.Invoke(ctx, "/OrdersService/ListLineItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetLineItem(ctx context.Context, in *GetLineItemRequest, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := c.cc.Invoke(ctx, "/OrdersService/GetLineItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) CreateLineItem(ctx context.Context, in *CreateLineItemRequest, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := c.cc.Invoke(ctx, "/OrdersService/CreateLineItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) UpdateLineItem(ctx context.Context, in *UpdateLineItemRequest, opts ...grpc.CallOption) (*LineItem, error) {
	out := new(LineItem)
	err := c.cc.Invoke(ctx, "/OrdersService/UpdateLineItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) DeleteLineItem(ctx context.Context, in *DeleteLineItemRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/OrdersService/DeleteLineItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, "/OrdersService/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/OrdersService/GetDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/OrdersService/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/OrdersService/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/OrdersService/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) ListFulfillments(ctx context.Context, in *ListFulfillmentsRequest, opts ...grpc.CallOption) (*ListFulfillmentsResponse, error) {
	out := new(ListFulfillmentsResponse)
	err := c.cc.Invoke(ctx, "/OrdersService/ListFulfillments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetFulfillment(ctx context.Context, in *GetFulfillmentRequest, opts ...grpc.CallOption) (*Fulfillment, error) {
	out := new(Fulfillment)
	err := c.cc.Invoke(ctx, "/OrdersService/GetFulfillment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) CreateFulfillment(ctx context.Context, in *CreateFulfillmentRequest, opts ...grpc.CallOption) (*Fulfillment, error) {
	out := new(Fulfillment)
	err := c.cc.Invoke(ctx, "/OrdersService/CreateFulfillment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) UpdateFulfillment(ctx context.Context, in *UpdateFulfillmentRequest, opts ...grpc.CallOption) (*Fulfillment, error) {
	out := new(Fulfillment)
	err := c.cc.Invoke(ctx, "/OrdersService/UpdateFulfillment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) DeleteFulfillment(ctx context.Context, in *DeleteFulfillmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/OrdersService/DeleteFulfillment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetTenantByFQDN(ctx context.Context, in *GetTenantByFQDNRequest, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/OrdersService/GetTenantByFQDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServiceServer is the server API for OrdersService service.
type OrdersServiceServer interface {
	// ListOrders returns paginated list of orders.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// GetOrder returns an order.
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	// CreateOrder creates an order.
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	// UpdateOrder updates an order.
	UpdateOrder(context.Context, *UpdateOrderRequest) (*Order, error)
	// DeleteOrder deletes an order.
	DeleteOrder(context.Context, *DeleteOrderRequest) (*empty.Empty, error)
	ListCustomers(context.Context, *ListCustomersRequest) (*ListCustomersResponse, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*Customer, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*Customer, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*Customer, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*empty.Empty, error)
	ListLineItems(context.Context, *ListLineItemsRequest) (*ListLineItemsResponse, error)
	GetLineItem(context.Context, *GetLineItemRequest) (*LineItem, error)
	CreateLineItem(context.Context, *CreateLineItemRequest) (*LineItem, error)
	UpdateLineItem(context.Context, *UpdateLineItemRequest) (*LineItem, error)
	DeleteLineItem(context.Context, *DeleteLineItemRequest) (*empty.Empty, error)
	// ListDomains returns paginated list of domains.
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// GetDomain returns a domain.
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	// CreateDomain creates a domain.
	CreateDomain(context.Context, *CreateDomainRequest) (*Domain, error)
	// UpdateDomain updates a domain.
	UpdateDomain(context.Context, *UpdateDomainRequest) (*Domain, error)
	// DeleteDomain deletes a domain.
	DeleteDomain(context.Context, *DeleteDomainRequest) (*empty.Empty, error)
	// ListFulfillments returns paginated list of fulfillments.
	ListFulfillments(context.Context, *ListFulfillmentsRequest) (*ListFulfillmentsResponse, error)
	// GetFulfillment returns a fulfillment.
	GetFulfillment(context.Context, *GetFulfillmentRequest) (*Fulfillment, error)
	// CreateFulfillment creates a fulfillment.
	CreateFulfillment(context.Context, *CreateFulfillmentRequest) (*Fulfillment, error)
	// UpdateFulfillment updates a fulfillment.
	UpdateFulfillment(context.Context, *UpdateFulfillmentRequest) (*Fulfillment, error)
	// DeleteFulfillment deletes a fulfillment.
	DeleteFulfillment(context.Context, *DeleteFulfillmentRequest) (*empty.Empty, error)
	// GetTenant returns a tenant by Shopify domain FQDN.
	GetTenantByFQDN(context.Context, *GetTenantByFQDNRequest) (*Tenant, error)
}

// UnimplementedOrdersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrdersServiceServer struct {
}

func (*UnimplementedOrdersServiceServer) ListOrders(ctx context.Context, req *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedOrdersServiceServer) GetOrder(ctx context.Context, req *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (*UnimplementedOrdersServiceServer) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedOrdersServiceServer) UpdateOrder(ctx context.Context, req *UpdateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (*UnimplementedOrdersServiceServer) DeleteOrder(ctx context.Context, req *DeleteOrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (*UnimplementedOrdersServiceServer) ListCustomers(ctx context.Context, req *ListCustomersRequest) (*ListCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomers not implemented")
}
func (*UnimplementedOrdersServiceServer) GetCustomer(ctx context.Context, req *GetCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (*UnimplementedOrdersServiceServer) CreateCustomer(ctx context.Context, req *CreateCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (*UnimplementedOrdersServiceServer) UpdateCustomer(ctx context.Context, req *UpdateCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (*UnimplementedOrdersServiceServer) DeleteCustomer(ctx context.Context, req *DeleteCustomerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (*UnimplementedOrdersServiceServer) ListLineItems(ctx context.Context, req *ListLineItemsRequest) (*ListLineItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLineItems not implemented")
}
func (*UnimplementedOrdersServiceServer) GetLineItem(ctx context.Context, req *GetLineItemRequest) (*LineItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLineItem not implemented")
}
func (*UnimplementedOrdersServiceServer) CreateLineItem(ctx context.Context, req *CreateLineItemRequest) (*LineItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLineItem not implemented")
}
func (*UnimplementedOrdersServiceServer) UpdateLineItem(ctx context.Context, req *UpdateLineItemRequest) (*LineItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLineItem not implemented")
}
func (*UnimplementedOrdersServiceServer) DeleteLineItem(ctx context.Context, req *DeleteLineItemRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLineItem not implemented")
}
func (*UnimplementedOrdersServiceServer) ListDomains(ctx context.Context, req *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (*UnimplementedOrdersServiceServer) GetDomain(ctx context.Context, req *GetDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (*UnimplementedOrdersServiceServer) CreateDomain(ctx context.Context, req *CreateDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (*UnimplementedOrdersServiceServer) UpdateDomain(ctx context.Context, req *UpdateDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (*UnimplementedOrdersServiceServer) DeleteDomain(ctx context.Context, req *DeleteDomainRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (*UnimplementedOrdersServiceServer) ListFulfillments(ctx context.Context, req *ListFulfillmentsRequest) (*ListFulfillmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFulfillments not implemented")
}
func (*UnimplementedOrdersServiceServer) GetFulfillment(ctx context.Context, req *GetFulfillmentRequest) (*Fulfillment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFulfillment not implemented")
}
func (*UnimplementedOrdersServiceServer) CreateFulfillment(ctx context.Context, req *CreateFulfillmentRequest) (*Fulfillment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFulfillment not implemented")
}
func (*UnimplementedOrdersServiceServer) UpdateFulfillment(ctx context.Context, req *UpdateFulfillmentRequest) (*Fulfillment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFulfillment not implemented")
}
func (*UnimplementedOrdersServiceServer) DeleteFulfillment(ctx context.Context, req *DeleteFulfillmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFulfillment not implemented")
}
func (*UnimplementedOrdersServiceServer) GetTenantByFQDN(ctx context.Context, req *GetTenantByFQDNRequest) (*Tenant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantByFQDN not implemented")
}

func RegisterOrdersServiceServer(s *grpc.Server, srv OrdersServiceServer) {
	s.RegisterService(&_OrdersService_serviceDesc, srv)
}

func _OrdersService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_ListCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).ListCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/ListCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).ListCustomers(ctx, req.(*ListCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_ListLineItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLineItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).ListLineItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/ListLineItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).ListLineItems(ctx, req.(*ListLineItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/GetLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetLineItem(ctx, req.(*GetLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_CreateLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).CreateLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/CreateLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).CreateLineItem(ctx, req.(*CreateLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_UpdateLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).UpdateLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/UpdateLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).UpdateLineItem(ctx, req.(*UpdateLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_DeleteLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).DeleteLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/DeleteLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).DeleteLineItem(ctx, req.(*DeleteLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_ListFulfillments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFulfillmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).ListFulfillments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/ListFulfillments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).ListFulfillments(ctx, req.(*ListFulfillmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/GetFulfillment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetFulfillment(ctx, req.(*GetFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_CreateFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).CreateFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/CreateFulfillment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).CreateFulfillment(ctx, req.(*CreateFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_UpdateFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).UpdateFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/UpdateFulfillment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).UpdateFulfillment(ctx, req.(*UpdateFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_DeleteFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).DeleteFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/DeleteFulfillment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).DeleteFulfillment(ctx, req.(*DeleteFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetTenantByFQDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantByFQDNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetTenantByFQDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrdersService/GetTenantByFQDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetTenantByFQDN(ctx, req.(*GetTenantByFQDNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrdersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OrdersService",
	HandlerType: (*OrdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrders",
			Handler:    _OrdersService_ListOrders_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrdersService_GetOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrdersService_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrdersService_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrdersService_DeleteOrder_Handler,
		},
		{
			MethodName: "ListCustomers",
			Handler:    _OrdersService_ListCustomers_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _OrdersService_GetCustomer_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _OrdersService_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _OrdersService_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _OrdersService_DeleteCustomer_Handler,
		},
		{
			MethodName: "ListLineItems",
			Handler:    _OrdersService_ListLineItems_Handler,
		},
		{
			MethodName: "GetLineItem",
			Handler:    _OrdersService_GetLineItem_Handler,
		},
		{
			MethodName: "CreateLineItem",
			Handler:    _OrdersService_CreateLineItem_Handler,
		},
		{
			MethodName: "UpdateLineItem",
			Handler:    _OrdersService_UpdateLineItem_Handler,
		},
		{
			MethodName: "DeleteLineItem",
			Handler:    _OrdersService_DeleteLineItem_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _OrdersService_ListDomains_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _OrdersService_GetDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _OrdersService_CreateDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _OrdersService_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _OrdersService_DeleteDomain_Handler,
		},
		{
			MethodName: "ListFulfillments",
			Handler:    _OrdersService_ListFulfillments_Handler,
		},
		{
			MethodName: "GetFulfillment",
			Handler:    _OrdersService_GetFulfillment_Handler,
		},
		{
			MethodName: "CreateFulfillment",
			Handler:    _OrdersService_CreateFulfillment_Handler,
		},
		{
			MethodName: "UpdateFulfillment",
			Handler:    _OrdersService_UpdateFulfillment_Handler,
		},
		{
			MethodName: "DeleteFulfillment",
			Handler:    _OrdersService_DeleteFulfillment_Handler,
		},
		{
			MethodName: "GetTenantByFQDN",
			Handler:    _OrdersService_GetTenantByFQDN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orders/orders_service.proto",
}
