// Code generated by protoc-gen-go. DO NOT EDIT.
// source: domains.proto

package orders

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DomainId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainId) Reset()         { *m = DomainId{} }
func (m *DomainId) String() string { return proto.CompactTextString(m) }
func (*DomainId) ProtoMessage()    {}
func (*DomainId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d14e6ad843a64e8e, []int{0}
}

func (m *DomainId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainId.Unmarshal(m, b)
}
func (m *DomainId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainId.Marshal(b, m, deterministic)
}
func (m *DomainId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainId.Merge(m, src)
}
func (m *DomainId) XXX_Size() int {
	return xxx_messageInfo_DomainId.Size(m)
}
func (m *DomainId) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainId.DiscardUnknown(m)
}

var xxx_messageInfo_DomainId proto.InternalMessageInfo

func (m *DomainId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DomainFqdn struct {
	Fqdn                 string   `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainFqdn) Reset()         { *m = DomainFqdn{} }
func (m *DomainFqdn) String() string { return proto.CompactTextString(m) }
func (*DomainFqdn) ProtoMessage()    {}
func (*DomainFqdn) Descriptor() ([]byte, []int) {
	return fileDescriptor_d14e6ad843a64e8e, []int{1}
}

func (m *DomainFqdn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainFqdn.Unmarshal(m, b)
}
func (m *DomainFqdn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainFqdn.Marshal(b, m, deterministic)
}
func (m *DomainFqdn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainFqdn.Merge(m, src)
}
func (m *DomainFqdn) XXX_Size() int {
	return xxx_messageInfo_DomainFqdn.Size(m)
}
func (m *DomainFqdn) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainFqdn.DiscardUnknown(m)
}

var xxx_messageInfo_DomainFqdn proto.InternalMessageInfo

func (m *DomainFqdn) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

type Domain struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fqdn                 string               `protobuf:"bytes,2,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d14e6ad843a64e8e, []int{2}
}

func (m *Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Domain.Unmarshal(m, b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return xxx_messageInfo_Domain.Size(m)
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Domain) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Domain) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Domain) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*DomainId)(nil), "DomainId")
	proto.RegisterType((*DomainFqdn)(nil), "DomainFqdn")
	proto.RegisterType((*Domain)(nil), "Domain")
}

func init() { proto.RegisterFile("domains.proto", fileDescriptor_d14e6ad843a64e8e) }

var fileDescriptor_d14e6ad843a64e8e = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x41, 0x4b, 0xfb, 0x40,
	0x14, 0xc4, 0x49, 0x52, 0xd2, 0xe6, 0x95, 0xff, 0xff, 0xb0, 0x07, 0xa9, 0xeb, 0xc1, 0x98, 0x53,
	0x41, 0xd8, 0x42, 0x3d, 0x79, 0x6c, 0x8d, 0x2d, 0x5e, 0x04, 0x83, 0x5e, 0xbc, 0x48, 0xea, 0xbe,
	0x96, 0x40, 0x93, 0x4d, 0x93, 0xd7, 0x43, 0xbf, 0x8e, 0x67, 0x3f, 0xa4, 0x64, 0x37, 0x9b, 0x4a,
	0x15, 0xbc, 0xbd, 0x64, 0x7e, 0x33, 0x3b, 0x0c, 0xfc, 0x93, 0x2a, 0x4f, 0xb3, 0xa2, 0x16, 0x65,
	0xa5, 0x48, 0xf1, 0xcb, 0x8d, 0x52, 0x9b, 0x2d, 0x4e, 0xf4, 0xd7, 0x6a, 0xbf, 0x9e, 0x50, 0x96,
	0x63, 0x4d, 0x69, 0x5e, 0xb6, 0xc0, 0xc5, 0x29, 0x80, 0x79, 0x49, 0x07, 0x23, 0x46, 0x1c, 0x06,
	0xb1, 0x8e, 0x7b, 0x90, 0xec, 0x3f, 0xb8, 0x99, 0x1c, 0x39, 0xa1, 0x33, 0xf6, 0x12, 0x37, 0x93,
	0x51, 0x08, 0x60, 0xb4, 0xc5, 0x4e, 0x16, 0x8c, 0x41, 0x6f, 0xbd, 0x93, 0x85, 0xd6, 0x83, 0x44,
	0xdf, 0xd1, 0x87, 0x03, 0xbe, 0x41, 0x4e, 0xcd, 0x1d, 0xee, 0x1e, 0x71, 0x76, 0x0b, 0xf0, 0x5e,
	0x61, 0x4a, 0x28, 0xdf, 0x52, 0x1a, 0x79, 0xa1, 0x33, 0x1e, 0x4e, 0xb9, 0x30, 0xf5, 0x84, 0xad,
	0x27, 0x9e, 0x6d, 0xff, 0x24, 0x68, 0xe9, 0x19, 0x35, 0xd6, 0x7d, 0x29, 0xad, 0xb5, 0xf7, 0xb7,
	0xb5, 0xa5, 0x67, 0x34, 0xfd, 0x74, 0xa0, 0x6f, 0x4a, 0xd6, 0x8c, 0x83, 0x7f, 0xa7, 0x33, 0x59,
	0x5f, 0x98, 0x7f, 0xdc, 0x1e, 0x8d, 0xf6, 0xa2, 0x4d, 0xbf, 0x68, 0xd7, 0xe0, 0xc7, 0xb8, 0x45,
	0x42, 0x16, 0x08, 0xbb, 0x17, 0x3f, 0xfb, 0xf1, 0xfe, 0x7d, 0xb3, 0x2c, 0x3b, 0x07, 0x6f, 0x89,
	0xf4, 0x9d, 0xec, 0x72, 0xae, 0x20, 0x58, 0x22, 0xcd, 0x0f, 0x8b, 0xa7, 0xf8, 0x91, 0x0d, 0xc5,
	0x71, 0xde, 0x0e, 0x99, 0x0f, 0x5e, 0x7d, 0x55, 0x49, 0xac, 0xea, 0x95, 0xaf, 0x73, 0x6f, 0xbe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x50, 0xf3, 0xa1, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DomainsClient is the client API for Domains service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DomainsClient interface {
	Create(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error)
	Update(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error)
	Delete(ctx context.Context, in *DomainId, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *DomainId, opts ...grpc.CallOption) (*Domain, error)
	GetByFQDN(ctx context.Context, in *DomainFqdn, opts ...grpc.CallOption) (*Domain, error)
}

type domainsClient struct {
	cc *grpc.ClientConn
}

func NewDomainsClient(cc *grpc.ClientConn) DomainsClient {
	return &domainsClient{cc}
}

func (c *domainsClient) Create(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/Domains/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Update(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/Domains/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Delete(ctx context.Context, in *DomainId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Domains/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Get(ctx context.Context, in *DomainId, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/Domains/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) GetByFQDN(ctx context.Context, in *DomainFqdn, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/Domains/GetByFQDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainsServer is the server API for Domains service.
type DomainsServer interface {
	Create(context.Context, *Domain) (*Domain, error)
	Update(context.Context, *Domain) (*Domain, error)
	Delete(context.Context, *DomainId) (*empty.Empty, error)
	Get(context.Context, *DomainId) (*Domain, error)
	GetByFQDN(context.Context, *DomainFqdn) (*Domain, error)
}

// UnimplementedDomainsServer can be embedded to have forward compatible implementations.
type UnimplementedDomainsServer struct {
}

func (*UnimplementedDomainsServer) Create(ctx context.Context, req *Domain) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDomainsServer) Update(ctx context.Context, req *Domain) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDomainsServer) Delete(ctx context.Context, req *DomainId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDomainsServer) Get(ctx context.Context, req *DomainId) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDomainsServer) GetByFQDN(ctx context.Context, req *DomainFqdn) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFQDN not implemented")
}

func RegisterDomainsServer(s *grpc.Server, srv DomainsServer) {
	s.RegisterService(&_Domains_serviceDesc, srv)
}

func _Domains_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Domains/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Create(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Domains/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Update(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Domains/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Delete(ctx, req.(*DomainId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Domains/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Get(ctx, req.(*DomainId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_GetByFQDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainFqdn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).GetByFQDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Domains/GetByFQDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).GetByFQDN(ctx, req.(*DomainFqdn))
	}
	return interceptor(ctx, in, info, handler)
}

var _Domains_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Domains",
	HandlerType: (*DomainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Domains_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Domains_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Domains_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Domains_Get_Handler,
		},
		{
			MethodName: "GetByFQDN",
			Handler:    _Domains_GetByFQDN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domains.proto",
}
