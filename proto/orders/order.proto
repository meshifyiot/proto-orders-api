syntax = "proto3";
option go_package = "github.com/meshifyiot/proto-orders-api/go/orders";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "orders/address.proto";
import "orders/note_attribute.proto";

// An order is a customer's completed request to purchase one or more products
// from a shop. An order is created when a customer completes the checkout
// process, during which time they provide an email address or phone number,
// billing address and payment information.
message Order {
  // The Shopify Store to which order belongs to.
  int64 shop_id = 1;
  
  // The Shopify ID of the order.
  int64 id = 2;
  
  // Customer facing order ID, used by the shop owner and customer.
  int64 order_number = 3;
    
  // The customer's email address.
  string email = 5;

  // The order's position in the shop's count of orders. 
  // Numbers are sequential and start at 1.
  int64 number = 6;

  // An optional note that a shop owner can attach to the order.
  string note = 7;

  // A unique token for the order.
  string token = 8;

  // The autogenerated date and time when the order was created in Shopify. 
  // The value for this property cannot be changed.
  google.protobuf.Timestamp created_at = 10;

  // The date and time when an order was processed. 
  // This value is the date that appears on your orders and that's used in 
  // the analytic reports. By default, it matches the created_at value. 
  google.protobuf.Timestamp processed_at = 11;

  // The date and time when the order was last modified.
  // Its value can change when no visible fields of an order have been updated.
  google.protobuf.Timestamp updated_at = 12;

  // The date and time when the order was closed.
  google.protobuf.Timestamp closed_at = 13;

  // The date and time when the order was canceled.
  google.protobuf.Timestamp cancelled_at = 14;
  
  // The order name, generated by combining the order_number property with the
  // order prefix and suffix that are set in the merchant's general settings.
  // This is different from the id property, which is the ID of the order used
  // by the Shopify API. This field can also be set by the Shopify API 
  // to be any string value.
  string name = 23;

  // The reason why the order was canceled. Valid values:
  // customer: The customer canceled the order.
  // fraud: The order was fraudulent.
  // inventory: Items in the order were not in inventory.
  // declined: The payment was declined.
  // other: A reason not in this list.
  string cancel_reason = 27;

  // The ID of the Shopify app that created the order.
  int64 app_id = 39;

  string contact_email = 53;

  // The mailing address to where the order will be shipped. 
  // This address is optional and will not be available on orders that 
  // do not require shipping.
  Address shipping_address = 65;

  // A list of line item objects, each containing information about an item
  // in the order.
  repeated int64 line_item_ids = 66;

  // Information about the customer. The order might not have a customer 
  // and apps should not depend on the existence of a customer object. 
  // This value might be null if the order was created through Shopify POS. 
  int64 customer_id = 68;

  // ID of folder that order belongs to.
  int32 folder_id = 69;

  // Whether this is a test order.
  bool test = 70;

  // The sum of all line item prices, discounts, shipping, taxes, and tips 
  // in the shop currency (in cents). Must be positive.
  int64 total_price = 71;
  
  // The price of the order in the shop currency (in cents) after discounts 
  // but before shipping, taxes, and tips.
  int64 subtotal_price = 72;
  
  // The sum of all line item weights in grams.
  int64 total_weight = 73;
  
  // The sum of all the taxes applied to the order in th shop currency 
  // (in cents). Must be positive.
  int64 total_tax = 74;

  // Whether taxes are included in the order subtotal.
  bool taxes_included = 75;

  // The three-letter code (ISO 4217 format) for the shop currency.
  string currency = 76;

  // The status of payments associated with the order. 
  // Can only be set when the order is created. Valid values:
  // pending: The payments are pending. Payment might fail in this state. 
  //  Check again to confirm whether the payments have been paid successfully.
  // authorized: The payments have been authorized.
  // partially_paid: The order have been partially paid.
  // paid: The payments have been paid.
  // partially_refunded: The payments have been partially refunded.
  // refunded: The payments have been refunded.
  // voided: The payments have been voided.
  string financial_status = 77;
  
  bool confirmed = 78;

  // The sum of all line item prices, discounts, shipping, taxes, and tips 
  // in the in USD cents. Must be positive.
  int64 total_price_usd = 79;

  // Extra information that is added to the order. Appears in the Additional
  // details section of an order details page. Each array entry must contain
  // a hash with name and value keys.
  repeated NoteAttribute note_attributes = 80;

  enum FulfillmentStatus {
    fulfilled = 0;
    null = 1;
    partial = 2;
    restocked = 3;
  }
  // The order's status in terms of fulfilled line items.
  FulfillmentStatus fulfillment_status = 81;
}

// --- Orders API messages ---

// ListOrdersRequest
//
// All filter fields applied with AND operator.
// Zero value in filter (by default) means no filtering.
//
message ListOrdersRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // The shop_id adds filtering by Shopify's shop.
  int64 shop_id = 3;

  // The folder_id adds filtering by folder. Optional.
  int64 folder_id = 4;
}

message ListOrdersResponse {
  // There will be a maximum number of items returned based on the page_size
  // field in the request.
  repeated Order orders = 1;

  // Token to retrieve the next page of results, or empty if there are no more
  // results in the list.
  string next_page_token = 2;
}

message GetOrderRequest {
  // The Shopify Store.
  int64 shop_id = 1;

  // The field will contain id of order.
  int64 order_id = 2;
}

message CreateOrderRequest {
  // The order resource to create.
  Order order = 1;
}

message UpdateOrderRequest {
  // The order resource which replaces the resource on the server.
  Order order = 1;

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see
  // https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteOrderRequest {
  // The Shopify Store.
  int64 shop_id = 1;

  // The resource id of the order to be deleted.
  int64 order_id = 2;
}

